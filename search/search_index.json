{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pixelblaze-client \u00b6 This site contains documentation for the Python pixelblaze-client library, which provides communication with the Pixelblaze LED controller. Table Of Contents \u00b6 The documentation is organized according to the Di\u00e1taxis documentation framework and consists of four separate parts: How-To Guides API Reference The Pixelblaze Protocol Tutorials which attempt to provide information on various aspects of the library to suit the needs of different users and use cases. Acknowledgements \u00b6 Thanks to: @wizard, for inventing the Pixelblaze and making it easy to do wondrous things with LEDs; Eric Lawrence, for inventing the Fiddler Web Debugger and making it easy to see the Pixelblaze wire protocols; and Guido van Rossum, for inventing the Python programming language and making it easy to put together a device driver like this in a matter of hours.","title":"Home"},{"location":"#pixelblaze-client","text":"This site contains documentation for the Python pixelblaze-client library, which provides communication with the Pixelblaze LED controller.","title":"pixelblaze-client"},{"location":"#table-of-contents","text":"The documentation is organized according to the Di\u00e1taxis documentation framework and consists of four separate parts: How-To Guides API Reference The Pixelblaze Protocol Tutorials which attempt to provide information on various aspects of the library to suit the needs of different users and use cases.","title":"Table Of Contents"},{"location":"#acknowledgements","text":"Thanks to: @wizard, for inventing the Pixelblaze and making it easy to do wondrous things with LEDs; Eric Lawrence, for inventing the Fiddler Web Debugger and making it easy to see the Pixelblaze wire protocols; and Guido van Rossum, for inventing the Python programming language and making it easy to put together a device driver like this in a matter of hours.","title":"Acknowledgements"},{"location":"how-to-guides/","text":"How-To Guides \u00b6 This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. How to get started? \u00b6 The easiest way to use this library is to install it from PyPi: pip install pixelblaze-client and within your script import the classes from the pixelblaze module: # your_script.py from pixelblaze import * After you've imported the class, you can follow along with any of the recipes below. Alternative installation method \u00b6 If for some reason you can't use PyPi, you can download the code from this GitHub repository and place the pixeblaze-client/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 pixelblaze-client/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 pixelblaze.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the classes from the pixelblaze module: # your_script.py from pixelblaze import * After you've imported the class, you can follow along with any of the recipes below. How to find your Pixelblazes? \u00b6 The EnumerateAddresses or EnumerateDevices iterators can help you here. The EnumerateAddresses iterator returns the IP address of each Pixelblaze it finds, which gives the quickest response because it detects the Pixelblazes but does not actually communicate with them. print(\"Finding Pixelblazes...\") for ipAddress in Pixelblaze.EnumerateAddresses(timeout=1500): print(f\" found a Pixelblaze at {ipAddress}\") The EnumerateDevices iterator detects Pixelblazes and returns an initialized Pixelblaze object for each one: print(\"Finding Pixelblazes...\") for pixelblaze in Pixelblaze.EnumerateDevices(timeout=1500): print(f\" at {pixelblaze.ipAddress} found '{pixelblaze.getDeviceName()}'\") If you are looking for a specific Pixelblaze, use the EnumerateAddresses iterator; if you want to do something with all Pixelblazes, the EnumerateDevices iterator saves a few lines of code. How to connect to a Pixelblaze? \u00b6 The Pixelblaze class is used to communicate with and control a Pixelblaze. To create a Pixelblaze object, create an instance of the class specifying its IP address as a string in the usual dotted-quad notation, i.e. \"192.168.4.1\". pb = Pixelblaze(\"192.168.4.1\") If you need or want to use a proxy server (for debugging it can be very useful to observe the protocol traffic by routing it through the Fiddler Web Debugger ), you can specify the proxy type (\"socks\" or \"http\") and address using the proxyUrl argument: pb = Pixelblaze(\"192.168.4.1\", proxyUrl=\"http://192.168.8.8:8888\") Advanced topic: lifecycle management \u00b6 The Pixelblaze class can be used in a with statement, which will automatically close the connection and dispose of the object when the with statement completes: with Pixelblaze(\"192.168.4.1\") as pb: # Do something with the pb object. # Do something else with the pb object. pass # At this point, the pb object will be deleted. Otherwise the connection will remain open until the Pixelblaze object goes out of scope and is garbage-collected. How to set which pattern is playing? \u00b6 Pixelblaze refers to its patterns using an alphanumeric ID code which remains constant for the lifetime of a pattern. Patterns also have a human-readable name which is displayed in the webUI pattern list and pattern editor, but this can be changed by the user so it is not supported by the Pixelblaze API. To find the ID of the patterns on the Pixelblaze, use the getPatternList() method which returns a dictionary where the key is the patternId and the value is the patternName: # Get the pattern list. patterns = pb.getPatternList() # Select first element of the first tuple in the list. patternId = patterns[0].key # Or search for a pattern by name. patternId = dict((value, key) for key, value in patterns.items()).get(\"patternName\") And finally, pass the patternId to the setActivePattern() method: # Ask the Pixelblaze to display this pattern. pb.setActivePattern(patternId) How to change the parameters of the pattern that is currently playing? \u00b6 Pixelblaze patterns can, if so designed, be modified at runtime in two ways. Patterns can contain user interface elements such as sliders, color pickers or input numbers that allow a user of the Pixelblaze webUI to adjust the pattern. The values of the UI controls for the pattern currently playing can be read with the getActiveControls() method (which returns a dictionary containing all the controls); then new values for one or all of the controls can be modified and sent back to the Pixelblaze with the setActiveControls() method. Patterns can also export variables that can be accessed and modified by external clients. The values of the variables for the pattern currently playing can be read with the getActiveVariables() method (which returns a dictionary containing all the variables); then new values for one or all of the variables can be modified and sent back to the Pixelblaze with the setActiveVariables() method.","title":"How-To"},{"location":"how-to-guides/#how-to-guides","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-get-started","text":"The easiest way to use this library is to install it from PyPi: pip install pixelblaze-client and within your script import the classes from the pixelblaze module: # your_script.py from pixelblaze import * After you've imported the class, you can follow along with any of the recipes below.","title":"How to get started?"},{"location":"how-to-guides/#alternative-installation-method","text":"If for some reason you can't use PyPi, you can download the code from this GitHub repository and place the pixeblaze-client/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 pixelblaze-client/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 pixelblaze.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the classes from the pixelblaze module: # your_script.py from pixelblaze import * After you've imported the class, you can follow along with any of the recipes below.","title":"Alternative installation method"},{"location":"how-to-guides/#how-to-find-your-pixelblazes","text":"The EnumerateAddresses or EnumerateDevices iterators can help you here. The EnumerateAddresses iterator returns the IP address of each Pixelblaze it finds, which gives the quickest response because it detects the Pixelblazes but does not actually communicate with them. print(\"Finding Pixelblazes...\") for ipAddress in Pixelblaze.EnumerateAddresses(timeout=1500): print(f\" found a Pixelblaze at {ipAddress}\") The EnumerateDevices iterator detects Pixelblazes and returns an initialized Pixelblaze object for each one: print(\"Finding Pixelblazes...\") for pixelblaze in Pixelblaze.EnumerateDevices(timeout=1500): print(f\" at {pixelblaze.ipAddress} found '{pixelblaze.getDeviceName()}'\") If you are looking for a specific Pixelblaze, use the EnumerateAddresses iterator; if you want to do something with all Pixelblazes, the EnumerateDevices iterator saves a few lines of code.","title":"How to find your Pixelblazes?"},{"location":"how-to-guides/#how-to-connect-to-a-pixelblaze","text":"The Pixelblaze class is used to communicate with and control a Pixelblaze. To create a Pixelblaze object, create an instance of the class specifying its IP address as a string in the usual dotted-quad notation, i.e. \"192.168.4.1\". pb = Pixelblaze(\"192.168.4.1\") If you need or want to use a proxy server (for debugging it can be very useful to observe the protocol traffic by routing it through the Fiddler Web Debugger ), you can specify the proxy type (\"socks\" or \"http\") and address using the proxyUrl argument: pb = Pixelblaze(\"192.168.4.1\", proxyUrl=\"http://192.168.8.8:8888\")","title":"How to connect to a Pixelblaze?"},{"location":"how-to-guides/#advanced-topic-lifecycle-management","text":"The Pixelblaze class can be used in a with statement, which will automatically close the connection and dispose of the object when the with statement completes: with Pixelblaze(\"192.168.4.1\") as pb: # Do something with the pb object. # Do something else with the pb object. pass # At this point, the pb object will be deleted. Otherwise the connection will remain open until the Pixelblaze object goes out of scope and is garbage-collected.","title":"Advanced topic: lifecycle management"},{"location":"how-to-guides/#how-to-set-which-pattern-is-playing","text":"Pixelblaze refers to its patterns using an alphanumeric ID code which remains constant for the lifetime of a pattern. Patterns also have a human-readable name which is displayed in the webUI pattern list and pattern editor, but this can be changed by the user so it is not supported by the Pixelblaze API. To find the ID of the patterns on the Pixelblaze, use the getPatternList() method which returns a dictionary where the key is the patternId and the value is the patternName: # Get the pattern list. patterns = pb.getPatternList() # Select first element of the first tuple in the list. patternId = patterns[0].key # Or search for a pattern by name. patternId = dict((value, key) for key, value in patterns.items()).get(\"patternName\") And finally, pass the patternId to the setActivePattern() method: # Ask the Pixelblaze to display this pattern. pb.setActivePattern(patternId)","title":"How to set which pattern is playing?"},{"location":"how-to-guides/#how-to-change-the-parameters-of-the-pattern-that-is-currently-playing","text":"Pixelblaze patterns can, if so designed, be modified at runtime in two ways. Patterns can contain user interface elements such as sliders, color pickers or input numbers that allow a user of the Pixelblaze webUI to adjust the pattern. The values of the UI controls for the pattern currently playing can be read with the getActiveControls() method (which returns a dictionary containing all the controls); then new values for one or all of the controls can be modified and sent back to the Pixelblaze with the setActiveControls() method. Patterns can also export variables that can be accessed and modified by external clients. The values of the variables for the pattern currently playing can be read with the getActiveVariables() method (which returns a dictionary containing all the variables); then new values for one or all of the variables can be modified and sent back to the Pixelblaze with the setActiveVariables() method.","title":"How to change the parameters of the pattern that is currently playing?"},{"location":"pixelblaze/","text":"module pixelblaze \u00b6 A library that provides a simple, synchronous interface for communicating with and controlling Pixelblaze LED controllers. This module contains the following classes: Pixelblaze : an object for controlling Pixelblazes. PBB : an object for creating and manipulating Pixelblaze Binary Backups. PBP : an object for creating and manipulating Pixelblaze Binary Patterns. EPE : an object for creating and manipulating Electromage Pattern Exports. class Pixelblaze \u00b6 The Pixelblaze class presents a simple synchronous interface to a single Pixelblaze's websocket API. The constructor takes the Pixelblaze's IPv4 address in the usual 12 digit numeric form (for example, \"192.168.4.1\"). To control multiple Pixelblazes, create multiple objects. The objective is to provide 99% coverage of the functionality of the Pixelblaze webUI, and so the supported methods are named and grouped according to the tabs of the webUI: CREATION __init__() EnumerateAddresses() EnumerateDevices() PATTERNS tab SEQUENCER section getSequencerMode / setSequencerMode getSequencerState / setSequencerState getSequencerShuffleTime / setSequencerShuffleTime getSequencerPlaylist / addToSequencerPlaylist / setSequencerPlaylist SAVED PATTERNS section getPatternList getActivePattern / setActivePattern getActiveVariables / setActiveVariables getActiveControls / setActiveControls deletePattern getPatternAsEpe EDIT tab getPatternControls getPatternSourceCode sendPatternToRenderer savePattern MAPPER tab getMapFunction / setMapFunction getMapData / setMapData SETTINGS tab getConfigSettings getConfigSequencer getConfigExpander NAME section getDeviceName / setDeviceName getDiscovery / setDiscovery getTimezone / setTimezone getAutoOffEnable / setAutoOffEnable getAutoOffStart / setAutoOffStart getAutoOffEnd / setAutoOffEnd LED section getBrightnessLimit / setBrightnessLimit getLedType / setLedType getPixelCount / setPixelCount getDataSpeed / setDataSpeed getColorOrder / setColorOrder getCpuSpeed / setCpuSpeed getNetworkPowerSave / setNetworkPowerSave UPDATES section getUpdateState / installUpdate getVersion / getVersionMajor / getVersionMinor / BACKUPS section saveBackup / restoreFromBackup reboot ADVANCED tab getBrandName / setBrandName getSimpleUiMode / setSimpleUiMode getLearningUiMode / setLearningUiMode GLOBAL CONTROLS getBrightnessSlider / setBrightnessSlider LOW-LEVEL SEND/RECEIVE wsReceive wsSendJson wsSendBinary FILESYSTEM getFileList getFile / putFile / deleteFile STATISTICS getStatistics getFPS getUptime getStorageSize getStorageUsed method __init__ \u00b6 __init__ ( ipAddress : str , proxyUrl : str = None ) Initializes an object for communicating with and controlling a Pixelblaze. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. method EnumerateAddresses \u00b6 EnumerateAddresses ( timeout : int = 1500 , proxyUrl : str = None , hostIP : str = '0.0.0.0' ) \u2192 LightweightEnumerator Returns an enumerator that will iterate through all the Pixelblazes on the local network, until {timeout} milliseconds have passed with no new devices appearing. Args: hostIP (str, optional): The network interface on which to listen for Pixelblazes. Defaults to \"0.0.0.0\" meaning all available interfaces. timeout (int, optional): The amount of time in milliseconds to listen for a new Pixelblaze to announce itself (They announce themselves once per second). Defaults to 1500. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. Returns: LightweightEnumerator : A subclassed Python enumerator object that returns (as a string) the IPv4 address of a Pixelblaze, in the usual dotted-quads numeric format. method EnumerateDevices \u00b6 EnumerateDevices ( timeout : int = 1500 , proxyUrl : str = None , hostIP : str = '0.0.0.0' ) \u2192 LightweightEnumerator Returns an enumerator that will iterate through all the Pixelblazes on the local network, until {timeout} milliseconds have passed with no new devices appearing. Args: hostIP (str, optional): The network interface on which to listen for Pixelblazes. Defaults to \"0.0.0.0\" meaning all available interfaces. timeout (int, optional): The amount of time in milliseconds to listen for a new Pixelblaze to announce itself (They announce themselves once per second). Defaults to 1500. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. Returns: LightweightEnumerator : A subclassed Python enumerator object that returns a Pixelblaze object for controlling a discovered Pixelblaze. method addToSequencerPlaylist \u00b6 addToSequencerPlaylist ( playlistContents : dict , patternId : str , duration : int ) \u2192 dict Appends a new entry to the specified playlist. Args: patternId (str): The patternId of the pattern to be played. duration (int): The number of milliseconds to play the pattern. playlistContents (dict): The results of a previous call to getSequencerPlaylist . Returns: dict : The updated playlist, which can then be sent back to the Pixelblaze with setSequencerPlaylist . method controlExists \u00b6 controlExists ( controlName : str , patternId : str = None ) \u2192 bool Tests whether the named control exists in the specified pattern. If no pattern is specified, the currently active pattern is assumed. Note that the active pattern can be undefined on a freshly started Pixelblaze until the pattern has been explicitly set. This function also will return False if the active pattern is not available. Args: controlName (str): The name of the control. patternId (str, optional): The pattern in which to test for the presence of the control. Defaults to None. Returns: bool : True if the specified control exists, False otherwise. method deleteFile \u00b6 deleteFile ( fileName : str ) \u2192 bool Deletes a file from this Pixelblaze using the HTTP API. Args: fileName (str): The pathname (as returned from getFileList ) of the file to be deleted. Returns: bool : True if the file was successfully stored; False otherwise. method deletePattern \u00b6 deletePattern ( patternId : str ) Delete a pattern saved on the Pixelblaze. Args: patternId (str): The patternId of the desired pattern. method getActiveControls \u00b6 getActiveControls ( configSequencer : dict = None ) \u2192 dict Returns the collection of controls for the pattern currently running on the Pixelblaze. If there are no controls or no pattern has been set, returns an empty dictionary. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: dict : A dictionary containing the control names and values, with controlName as the key and controlValue as the value. method getActivePattern \u00b6 getActivePattern ( configSequencer : dict = None ) \u2192 str Returns the ID of the pattern currently running on the Pixelblaze. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: str : The patternId of the current pattern, if any; otherwise an empty string. method getActiveVariables \u00b6 getActiveVariables () \u2192 dict Gets the names and values of all variables exported by the current pattern. Returns: dict : A dictionary containing all the variables exported by the active pattern, with variableName as the key and variableValue as the value. method getAutoOffEnable \u00b6 getAutoOffEnable ( configSettings : dict = None ) \u2192 bool Returns whether the auto-Off timer is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean indicating whether the auto-Off timer is enabled. method getAutoOffEnd \u00b6 getAutoOffEnd ( configSettings : dict = None ) \u2192 str Returns the time, if any, at which the Pixelblaze will turn on the pattern when the auto-Off timer is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : A Unix time string in \"HH:MM\" format. method getAutoOffStart \u00b6 getAutoOffStart ( configSettings : dict = None ) \u2192 str Returns the time, if any, at which the Pixelblaze will turn off the pattern when the auto-Off timer is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : A Unix time string in \"HH:MM\" format. method getBrandName \u00b6 getBrandName ( configSettings : dict = None ) \u2192 str Returns the brand name, if any, of this Pixelblaze (blank unless rebadged by a reseller). Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : The brand name. method getBrightnessLimit \u00b6 getBrightnessLimit ( configSettings : dict = None ) \u2192 int Returns the maximum brightness for the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: int : The maximum brightness, expressed as a percent value between 0 and 100 (yes, it's inconsistent with the 'brightness' settings). method getBrightnessSlider \u00b6 getBrightnessSlider ( configSettings : dict = None ) \u2192 float Get the value of the UI brightness slider. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: float : A floating-point value between 0.0 and 1.0. method getColorControlName \u00b6 getColorControlName ( patternId : str = None ) \u2192 str Returns the name of the specified pattern's first rgbPicker or hsvPicker control if one exists, or None otherwise. Args: patternId (str, optional): The pattern to search for color controls; or the currently active pattern if not specified. Defaults to None. Returns: str : The name of the specified pattern's first rgbPicker or hsvPicker control if one exists, or None otherwise. method getColorControlNames \u00b6 getColorControlNames ( patternId : str = None ) \u2192 list Returns a list of names of the specified pattern's rgbPicker or hsvPicker controls if any exist, None otherwise. If the pattern argument is not specified, check the currently running pattern method getColorOrder \u00b6 getColorOrder ( configSettings : dict = None ) \u2192 < enum 'colorOrders' > Returns the color order of the LEDs connected to the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: colorOrders : The ordering for the color data sent to the LEDs. method getConfigExpander \u00b6 getConfigExpander () \u2192 dict Retrieves the OutputExpander configuration. Returns: dict : The OutputExpander configuration as a dictionary, with settingName as the key and settingValue as the value. method getConfigSequencer \u00b6 getConfigSequencer () \u2192 dict Retrieves the Sequencer state. Returns: dict : The sequencer configuration as a dictionary, with settingName as the key and settingValue as the value. method getConfigSettings \u00b6 getConfigSettings () \u2192 dict Returns the configuration as defined on the Settings tab of the Pixelblaze. Returns: dict : A dictionary containing the configuration settings, with settingName as the key and settingValue as the value. method getCpuSpeed \u00b6 getCpuSpeed ( configSettings : dict = None ) \u2192 < enum 'cpuSpeeds' > Returns the CPU speed of the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: cpuSpeeds : An enumeration representing the CPU speed. method getDataSpeed \u00b6 getDataSpeed ( configSettings : dict = None ) \u2192 int Returns the data speed of the LEDs connected to the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: int : The data speed for communicating with the LEDs. method getDeviceName \u00b6 getDeviceName ( configSettings : dict = None ) \u2192 str Returns the user-friendly name of the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : The user-friendly name of the Pixelblaze. method getDiscovery \u00b6 getDiscovery ( configSettings : dict = None ) \u2192 bool Returns a boolean signifying whether the Pixelblaze announces itself to the Electromage Discovery Service. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean signifying whether the Pixelblaze announces itself to the Electromage Discovery Service. method getFPS \u00b6 getFPS ( savedStatistics : dict = None ) \u2192 float Return the speed (in Frames per Second) of the pattern rendering. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The pattern speed in FPS, as reported in a Pixelblaze statistics message. method getFile \u00b6 getFile ( fileName : str ) \u2192 bytes Downloads a file from the Pixelblaze using the HTTP API. Args: fileName (str): The pathname (as returned from getFileList ) of the file to be downloaded. Returns: bytes : The contents of the file. method getFileList \u00b6 getFileList ( fileTypes : fileTypes = < fileTypes . fileAll : 63 > ) \u2192 list [ str ] Returns a list of all the files of a particular type stored on the Pixelblaze's filesystem. For Pixelblazes running firmware versions lower than 2.29/3.24 (the point at which the necessary API was introduced), the list includes the names of optional configuration files that may or may not exist on a particular Pixelblaze, depending on its setup. Args: fileTypes (fileTypes, optional): A bitmasked enumeration of the fileTypes to be listed. Defaults to fileTypes.fileAll. Returns: list[str] : A list of filenames of the requested fileType. method getLearningUiMode \u00b6 getLearningUiMode ( configSettings : dict = None ) \u2192 bool Returns whether \"Learning UI Mode\" is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean indicating whether \"Learning UI Mode\" is enabled. method getLedType \u00b6 getLedType ( configSettings : dict = None ) \u2192 < enum 'ledTypes' > Returns the type of LEDs connected to the Pixelblaze. method getMapData \u00b6 getMapData () \u2192 bytes Gets the binary representation of the pixelMap entered on the 'Mapper' tab. Returns: bytes : The binary mapData as generated by the Mapper tab of the Pixelblaze webUI. method getMapFunction \u00b6 getMapFunction () \u2192 str Returns the mapFunction text used to populate the Mapper tab in the Pixelblaze UI. Returns: str : The text of the mapFunction. method getNetworkPowerSave \u00b6 getNetworkPowerSave ( configSettings : dict = None ) \u2192 bool Returns whether the \"Network Power Saving\" mode is enabled (and WiFi is disabled). Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : Whether the \"Network Power Saving\" mode is enabled. method getPatternAsEpe \u00b6 getPatternAsEpe ( patternId : str ) \u2192 str Convert a stored pattern into an exportable, portable JSON format (which then needs to be saved by the caller). Args: patternId (str): The patternId of the desired pattern. Returns: str : The exported pattern as a JSON dictionary. method getPatternControls \u00b6 getPatternControls ( patternId : str ) \u2192 dict Returns the name and value of any UI controls exported by the specified pattern. Args: patternId (str): The patternId of the pattern. Returns: dict : A dictionary containing the control names and values, with controlName as the key and controlValue as the value. method getPatternList \u00b6 getPatternList ( forceRefresh : bool = False ) \u2192 dict Returns a list of all the patterns saved on the Pixelblaze. Normally reads from the cached pattern list, which is refreshed every 10 minutes by default. To change the cache refresh interval, call setCacheRefreshTime(seconds). Args: forceRefresh (bool, optional): Forces a refresh of the cached patternList. Defaults to False. Returns: dict : A dictionary of the patterns stored on the Pixelblaze, where the patternId is the key and the patternName is the value. method getPatternSourceCode \u00b6 getPatternSourceCode ( patternId : str ) \u2192 str Gets the sourceCode of a saved pattern from the Pixelblaze. Args: patternId (str): The patternId of the desired pattern. Returns: str : A string representation of a JSON dictionary containing the pattern source code. method getPeers \u00b6 getPeers () A new command, added to the API but not yet implemented as of v2.29/v3.24, that will return a list of all the Pixelblazes visible on the local network segment. Returns: TBD : To be defined once @wizard implements the function. method getPixelCount \u00b6 getPixelCount ( configSettings : dict = None ) \u2192 int Returns the number of LEDs connected to the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: int : The number of LEDs connected to the Pixelblaze. method getPreviewFrame \u00b6 getPreviewFrame () \u2192 bytes Grab one of the preview frames that Pixelblaze sends after every render cycle. Returns: bytes : a collection of bytes representing pixelCount tuples containing the (R, G, B) values for each pixel in the pattern preview. method getPreviewImage \u00b6 getPreviewImage ( patternId : str ) \u2192 bytes Gets the preview image (a JPEG with 150 iterations of the pattern) saved within a pattern. Args: patternId (str): The patternId of the desired pattern. Returns: bytes : A JPEG image in which each column represents a particular LED and each row represents an iteration of the pattern. method getSequencerMode \u00b6 getSequencerMode ( configSequencer : dict = None ) \u2192 < enum 'sequencerModes' > Gets the current sequencer mode. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: sequencerModes : The sequencerMode. method getSequencerPlaylist \u00b6 getSequencerPlaylist ( playlistId : str = '_defaultplaylist_' ) Fetches the specified playlist. At the moment, only the default playlist is supported by the Pixelblaze. Args: playlistId (str, optional): The name of the playlist (for future enhancement; currently only ' defaultplaylist ' is supported). Defaults to \" defaultplaylist \". Returns: dict : The contents of the playlist. method getSequencerShuffleTime \u00b6 getSequencerShuffleTime ( configSequencer : dict = None ) \u2192 int Gets the time the Pixelblaze's sequencer will run each pattern before switching to the next. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: int : The number of milliseconds to play each pattern. method getSequencerState \u00b6 getSequencerState ( configSequencer : dict = None ) \u2192 bool Gets the current sequencer run state. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: bool : True if the sequencer is running; False otherwise. method getSimpleUiMode \u00b6 getSimpleUiMode ( configSettings : dict = None ) \u2192 bool Returns whether \"Simple UI Mode\" is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean indicating whether \"Simple UI Mode\" is enabled. method getStatistics \u00b6 getStatistics () \u2192 dict Grab one of the statistical packets that Pixelblaze sends every second. Returns: dict : the JSON message received from the Pixelblaze. method getStorageSize \u00b6 getStorageSize ( savedStatistics : dict = None ) \u2192 int Return the available Flash storage on the Pixelblaze. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The available storage in bytes, as reported in a Pixelblaze statistics message. method getStorageUsed \u00b6 getStorageUsed ( savedStatistics : dict = None ) \u2192 int Return the amount of Flash storage used on the Pixelblaze. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The used storage in bytes, as reported in a Pixelblaze statistics message. method getTimezone \u00b6 getTimezone ( configSettings : dict = None ) \u2192 str Returns the timezone, if any, for the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : A standard Unix tzstring. method getUpdateState \u00b6 getUpdateState () \u2192 < enum 'updateStates' > Returns the updateState of the Pixelblaze. Returns: updateStates : An enumeration describing the updateState of the Pixelblaze. method getUptime \u00b6 getUptime ( savedStatistics : dict = None ) \u2192 int Return the uptime (in seconds) of the Pixelblaze. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The uptime in seconds, as reported in a Pixelblaze statistics message. method getUrl \u00b6 getUrl ( endpoint : str = None ) \u2192 str Build the URL to communicate with the Pixelblaze using an HTTP endpoint. Args: endpoint (str, optional): The HTTP endpoint. Defaults to None, which returns the URL of the Pixelblaze webUI. Returns: str : The URL of the HTTP endpoint on the Pixelblaze. method getVersion \u00b6 getVersion () \u2192 float Returns the firmware version of the Pixelblaze. Returns: float : The firmware version, in major.minor format. method getVersionMajor \u00b6 getVersionMajor () \u2192 int Returns the major version number. Returns: int : A positive integer representing the integer portion of the version number (eg. for v3.24, returns 3). method getVersionMinor \u00b6 getVersionMinor () \u2192 int Returns the minor version number. Returns: int : A positive integer representing the fractional portion of the version number (eg. for v3.24, returns 24). method installUpdate \u00b6 installUpdate () \u2192 < enum 'updateStates' > Installs new Pixelblaze firmware, if the current updateState indicates that an update is available. Returns: updateStates : An enumeration describing the new updateState of the Pixelblaze. method nextSequencer \u00b6 nextSequencer ( saveToFlash : bool = False ) Mimics the 'Next' button in the UI. If the sequencerMode is ShuffleAll or Playlist, advances the pattern sequencer to the next pattern. Args: saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method pauseRenderer \u00b6 pauseRenderer ( doPause : bool ) Pause rendering. Lasts until unpause() is called or the Pixelblaze is reset. CAUTION: For advanced users only. Only used to stop the render engine before sending new bytecode. If you don't know exactly why you want to do this, DON'T DO IT. Args: doPause (bool): If True, pause the render engine; if False, resume it. method pauseSequencer \u00b6 pauseSequencer ( saveToFlash : bool = False ) Mimics the 'Pause' button in the UI. Pauses the pattern sequencer, without changing the current position in the shuffle or playlist. Has no effect if the sequencer is not currently running. Args: saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method playSequencer \u00b6 playSequencer ( saveToFlash : bool = False ) Mimics the 'Play' button in the UI. Starts the pattern sequencer, the consequences of which will vary depending upon the sequencerMode. Args: saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method putFile \u00b6 putFile ( fileName : str , fileContents : bytes ) \u2192 bool Uploads a file to the Pixelblaze using the HTTP API. Args: fileName (str): The pathname at which to store the file. fileContents (bytes): The data to store in the file. Returns: bool : True if the file was successfully stored; False otherwise. method reboot \u00b6 reboot () Reboots the Pixelblaze. This is occasionally necessary, eg. to force the Pixelblaze to recognize changes to configuration files. method restoreFromBackup \u00b6 restoreFromBackup ( fileName : str ) Restores the contents of this Pixelblaze from a Pixelblaze Binary Backup file. Args: fileName (str): The desired filename for the Pixelblaze Binary Backup. method saveBackup \u00b6 saveBackup ( fileName : str ) Saves the contents of this Pixelblaze into a Pixelblaze Binary Backup file. Args: fileName (str): The desired filename for the Pixelblaze Binary Backup. method savePattern \u00b6 savePattern ( previewImage : bytes , sourceCode : str , byteCode : bytes ) Saves a new pattern to the Pixelblaze filesystem. Mimics the effects of the 'Save' button. If you don't know how to generate the previewImage and byteCode components, you don't want to do this. Args: previewImage (bytes): A JPEG image in which each column represents a particular LED and each row represents an iteration of the pattern. sourceCode (str): A string representation of a JSON dictionary containing the pattern source code. byteCode (bytes): A valid blob of bytecode as generated by the Editor tab in the Pixelblaze webUI. method sendPatternToRenderer \u00b6 sendPatternToRenderer ( bytecode : bytes , controls : dict = {}) Sends a blob of bytecode and a JSON dictionary of UI controls to the Renderer. Mimics the actions of the webUI code editor. Args: bytecode (bytes): A valid blob of bytecode as generated by the Editor tab in the Pixelblaze webUI. controls (dict, optional): a dictionary of UI controls exported by the pattern, with controlName as the key and controlValue as the value. Defaults to {}. method sendPing \u00b6 sendPing () \u2192 Optional [ str ] Send a Ping message to the Pixelblaze and wait for the Acknowledgement response. Returns: Union[str, None] : The acknowledgement message received from the Pixelblaze, or None if a timeout occurred. method setActiveControls \u00b6 setActiveControls ( dictControls : dict , saveToFlash : bool = False ) Sets the value of one or more UI controls exported from the active pattern. Args: dictControls (dict): A dictionary containing the values to be set, with controlName as the key and controlValue as the value. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setActivePattern \u00b6 setActivePattern ( patternId : str , saveToFlash : bool = False ) Sets the active pattern. Args: patternId (str): The patternId of the desired pattern. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setActivePatternByName \u00b6 setActivePatternByName ( patternName : str , saveToFlash : bool = False ) Sets the currently running pattern using a text name. Args: patternName (str): The name of the pattern. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setActiveVariables \u00b6 setActiveVariables ( dictVariables : dict ) Sets the values of one or more variables exported by the current pattern. Variables not present in the current pattern are ignored. Args: dict : A dictionary containing the variables to be set, with variableName as the key and variableValue as the value. method setAutoOffEnable \u00b6 setAutoOffEnable ( boolValue : bool , saveToFlash : bool = False ) Enables or disables the Pixelblaze's auto-Off scheduler. Args: boolValue (bool): A boolean indicating whether the auto-Off scheduler should be used. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setAutoOffEnd \u00b6 setAutoOffEnd ( timeValue : str , saveToFlash : bool = False ) Sets the time at which the Pixelblaze will turn on the pattern. Args: timeValue (str): A Unix time string in \"HH:MM\" format. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setAutoOffStart \u00b6 setAutoOffStart ( timeValue : str , saveToFlash : bool = False ) Sets the time at which the Pixelblaze will turn off the pattern. Args: timeValue (str): A Unix time string in \"HH:MM\" format. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setBrandName \u00b6 setBrandName ( brandName : str ) Sets the brand name of the Pixelblaze (used by VARs to change the brand name that appears on the webUI). Args: brandName (str): The new name. method setBrightnessLimit \u00b6 setBrightnessLimit ( maxBrightness : int , saveToFlash : bool = False ) Sets the Pixelblaze's global brightness limit. Args: maxBrightness (int): The maximum brightness, expressed as a percent value between 0 and 100 (yes, it's inconsistent with the 'brightness' settings). saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setBrightnessSlider \u00b6 setBrightnessSlider ( brightness : float , saveToFlash : bool = False ) Set the value of the UI brightness slider. Args: brightness (float): A floating-point value between 0.0 and 1.0. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setCacheRefreshTime \u00b6 setCacheRefreshTime ( seconds : int ) Set the interval, in seconds, after which calls to getPatternList() clear the pattern cache and fetch a new pattern list from the Pixelblaze. The Default is 600 seconds (10 minutes); the maximum allowable value is clamped to a million seconds (about 277 hours, or 11.5 days). Anything else would be excessive. Args: seconds (int): The maximum age of the pattern cache. method setColorControl \u00b6 setColorControl ( controlName : str , color : dict , saveToFlash : bool = False ) Sets the 3-element color of the specified HSV or RGB color picker. Args: controlName (str): The name of the color control to change. color (dict): A dictionary of RGB or HSV colors, with all values in the range 0-1. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setColorOrder \u00b6 setColorOrder ( colorOrder : colorOrders , saveToFlash : bool = False ) Sets the color order for the LEDs connected to the Pixelblaze. Args: colorOrder (colorOrders): The ordering for the color data sent to the LEDs. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setCpuSpeed \u00b6 setCpuSpeed ( cpuSpeed : cpuSpeeds ) Sets the CPU speed of the Pixelblaze. Note that this setting will not take effect until the Pixelblaze is rebooted (which can be done with the reboot function). Args: cpuSpeed (cpuSpeeds): The desired CPU speed. method setDataSpeed \u00b6 setDataSpeed ( speed : int , saveToFlash : bool = False ) Sets custom data rate for communicating with the LEDs. CAUTION: For advanced users only. If you don't know exactly why you want to do this, DON'T DO IT. See discussion in this thread on the Pixelblaze forum: https://forum.electromage.com/t/timing-of-a-cheap-strand/739 Args: speed (int): The data rate for communicating with the LEDs. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setDeviceName \u00b6 setDeviceName ( name : str ) Sets the device name of the Pixelblaze. Args: name (str): The human-readable name of the Pixelblaze. method setDiscovery \u00b6 setDiscovery ( enableDiscovery : bool , timezoneName : str = None ) Sets whether this Pixelblaze announces its presence to (and gets a clocktime reference from) the Electromage Discovery Service. Args: enableDiscovery (bool): A boolean controlling whether or not this Pixelblaze announces itself to the Electromage Discovery Service. timezoneName (str, optional): If present, a Unix tzstring specifying how to adjust the clocktime reference received from the Electromage Discovery Service. Defaults to None. method setLearningUiMode \u00b6 setLearningUiMode ( doLearningMode : bool ) Enables or disables \"Learning UI Mode\" which has additional UI help for new users. Args: doSimpleMode (bool): Whether to enable \"Learning UI Mode\". method setLedType \u00b6 setLedType ( ledType : ledTypes , dataSpeed : int = None , saveToFlash : bool = False ) Defines the type of LEDs connected to the Pixelblaze. Args: ledType (ledTypes): The type of LEDs connected to the Pixelblaze. dataSpeed (int, optional): If provided, sets a custom data speed for communication with the LEDs; otherwise the defaults from the webUI are used. Defaults to None. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setMapData \u00b6 setMapData ( mapData : bytes , saveToFlash : bool = True ) Sets the binary mapData used by the Pixelblaze. Args: mapData (bytes): a blob of binary mapData as generated by the Mapper tab of the Pixelblaze webUI. saveToFlash (bool, optional): A boolean indicating whether the mapData should be saved to Flash. Defaults to True. method setMapFunction \u00b6 setMapFunction ( mapFunction : str ) \u2192 bool Sets the mapFunction text used to populate the Mapper tab in the Pixelblaze UI. Note that this is does not change the mapData used by the Pixelblaze; the Mapper tab in the Pixelblaze UI compiles this text to produce binary mapData which is saved separately (see the setMapData function). Args: mapFunction (str): The text of the mapFunction. Returns: bool : True if the function text was successfully saved; otherwise False. method setNetworkPowerSave \u00b6 setNetworkPowerSave ( disableWifi : bool ) Enables or disables the WiFi connection on the Pixelblaze, which can significantly reduce power requirements for battery-powered installations. Note that this setting will not take effect until the Pixelblaze is rebooted (which can be done with the reboot function). Args: disableWifi (bool): A boolean indicating whether to disable Wifi. method setPixelCount \u00b6 setPixelCount ( nPixels : int , saveToFlash : bool = False ) Sets the number of LEDs attached to the Pixelblaze. Note that changing the number of pixels does not recalculate the pixelMap. Args: nPixels (int): The number of pixels. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setSendPreviewFrames \u00b6 setSendPreviewFrames ( doUpdates : bool ) Set whether or not the Pixelblaze sends pattern preview frames. Args: doUpdates (bool): True sends preview frames, False stops. method setSequencerMode \u00b6 setSequencerMode ( sequencerMode : sequencerModes , saveToFlash : bool = False ) Sets the sequencer mode to one of the available sequencerModes (Off, ShuffleAll, or Playlist). Args: sequencerMode (enum): The desired sequencer mode. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setSequencerPlaylist \u00b6 setSequencerPlaylist ( playlistContents : dict , playlistId : str = '_defaultplaylist_' ) Replaces the entire contents of the specified playlist. At the moment, only the default playlist is supported by the Pixelblaze. Args: playlistContents (dict): The new playlist contents. playlistId (str, optional): The name of the playlist (for future enhancement; currently only ' defaultplaylist ' is supported). Defaults to \" defaultplaylist \". method setSequencerShuffleTime \u00b6 setSequencerShuffleTime ( nMillis : int , saveToFlash : bool = False ) Sets the time the Pixelblaze's sequencer will run each pattern before switching to the next. Args: nMillis (int): The number of milliseconds to play each pattern. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setSequencerState \u00b6 setSequencerState ( sequencerState : bool , saveToFlash : bool = False ) Set the run state of the sequencer. Args: sequencerState (bool): A boolean value determining whether or not the sequencer should run. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False. method setSimpleUiMode \u00b6 setSimpleUiMode ( doSimpleMode : bool ) Enables or disables \"Simple UI Mode\" which makes the UI more suitable for non-technical audiences. Args: doSimpleMode (bool): Whether to enable \"Simple UI Mode\". method setTimezone \u00b6 setTimezone ( timezoneName : str ) Sets the Pixelblaze's timezone, which specifies how to adjust the clocktime reference provided by the Electromage Discovery Service. To clear the timezone, pass an empty string. Args: timezoneName (str): A Unix tzstring specifying how to adjust the clocktime reference provided by the Electromage Discovery Service. method wsReceive \u00b6 wsReceive ( binaryMessageType : messageTypes = None ) \u2192 Union [ str , bytes , NoneType ] Wait for a message of a particular type from the Pixelblaze. Args: binaryMessageType (messageTypes, optional): The type of binary message to wait for (if None, waits for a text message). Defaults to None. Returns: Union[str, bytes, None] : The message received from the Pixelblaze (of type bytes for binaryMessageTypes, otherwise of type str), or None if a timeout occurred. method wsSendBinary \u00b6 wsSendBinary ( binaryMessageType : messageTypes , blob : bytes , expectedResponse : str = None ) Send a binary command to the Pixelblaze, and optionally wait for a suitable response. Args: binaryMessageType (messageTypes, optional): The type of binary message to send. blob (bytes): The message body to be sent. expectedResponse (str, optional): If present, the initial key of the expected JSON response to the command. Defaults to None. Returns: response : The message received from the Pixelblaze (of type bytes for binaryMessageTypes, otherwise of type str), or None if a timeout occurred. method wsSendJson \u00b6 wsSendJson ( command : dict , expectedResponse = None ) \u2192 Union [ str , bytes , NoneType ] Send a JSON-formatted command to the Pixelblaze, and optionally wait for a suitable response. Args: command (dict): A Python dictionary which will be sent to the Pixelblaze as a JSON command. expectedResponse (str, optional): If present, the initial key of the expected JSON response to the command. Defaults to None. Returns: Union[str, bytes, None] : The message received from the Pixelblaze (of type bytes for binaryMessageTypes, otherwise of type str), or None if a timeout occurred. class PBB \u00b6 This class provides methods for importing, exporting, and manipulating the contents of a Pixelblaze Binary Backup, as created from the Settings menu on a Pixelblaze. CREATION - fromFile() - fromIpAddress() - fromPixelblaze() PROPERTIES - deviceName() - getFileList() MANIPULATION - getFile() / putFile() / deleteFile() PERSISTENCE - toFile() - toIpAddress() - toPixelblaze() Note: The constructor is not intended to be called directly; objects are created and returned from the object creation methods described above. method __init__ \u00b6 __init__ ( name : str , blob : bytes ) Initializes a new Pixelblaze Binary Backup (PBB) object. Args: id (str): The patternId of the pattern. blob (bytes): The binary contents of the pattern. Note: This method is not intended to be called directly; use the static methods fromFile() , fromIpAddress() or fromPixelblaze() methods to create and return a Pixelblaze Binary Backup (PBB) object. property deviceName \u00b6 Gets the user-friendly name of the device from which this PixelBlazeBackup was made. Returns: str : The user-friendly name of the device from which this PixelBlazeBackup was made. method deleteFile \u00b6 deleteFile ( fileName : str ) Removes a particular file from this PixelBlazeBackup. Args: fileName (str): The name of the file to be deleted. method fromFile \u00b6 fromFile ( fileName : str ) \u2192 PBB Creates and returns a new Pixelblaze Binary Backup whose contents are loaded from a file on disk. Args: fileName (str): The filename of the Pixelblaze Binary Backup. Returns: PBB : A new Pixelblaze Binary Backup object. method fromIpAddress \u00b6 fromIpAddress ( ipAddress : str , proxyUrl : str = None , verbose : bool = False ) \u2192 PBB Creates and returns a new Pixelblaze Binary Backup whose contents are loaded from a Pixelblaze specified by IP address. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False. Returns: PBB : A new Pixelblaze Binary Backup object. method fromPixelblaze \u00b6 fromPixelblaze ( pb : Pixelblaze , verbose : bool = False ) \u2192 PBB Creates and returns a new Pixelblaze Binary Backup whose contents are loaded from an existing Pixelblaze object. Args: pb (Pixelblaze): A Pixelblaze object. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False. Returns: PBB : A new Pixelblaze Binary Backup object. method getFile \u00b6 getFile ( fileName : str ) \u2192 bytes Returns the contents of a particular file contained in this PixelBlazeBackup. Args: fileName (str): The name of the file to be returned. Returns: bytes : The contents of the requested file. method getFileList \u00b6 getFileList ( fileTypes : fileTypes = < fileTypes . fileAll : 63 > ) \u2192 list [ str ] Returns a sorted list of the files contained in this PixelBlazeBackup. Args: fileTypes (fileTypes, optional): An bitwise enumeration indicating the types of files to list. Defaults to fileTypes.fileAll. Returns: list[str] : A list of filenames. method putFile \u00b6 putFile ( fileName : str , fileContents : bytes ) Inserts or replaces the contents of a particular file into this PixelBlazeBackup. Args: fileName (str): The name of the file to be stored. fileContents (bytes): The contents of the file to be stored. method toFile \u00b6 toFile ( fileName : str = None , explode : bool = False ) Writes this Pixelblaze Binary Backup to a file on disk. Args: fileName (str, optional): If specified, the filename of the Pixelblaze Binary Backup to be created; otherwise the originating Pixelblaze name is used. Defaults to None. explode (bool, optional): If specified, also exports the files within the Pixelblaze Binary Backup to a subdirectory. Defaults to False. method toIpAddress \u00b6 toIpAddress ( ipAddress : str , proxyUrl : str = None , verbose : bool = False ) Restores the contents of this PixelBlazeBackup to a Pixelblaze identified by IP Address. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\").. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False. method toPixelblaze \u00b6 toPixelblaze ( pb : Pixelblaze , verbose : bool = False ) Uploads the contents of this PixelBlazeBackup to the destination Pixelblaze. Args: pb (Pixelblaze): A Pixelblaze object. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False. class PBP \u00b6 This class represents a Pixelblaze Binary Pattern, as stored on the Pixelblaze filesystem or contained in a Pixelblaze Binary Backup. CREATION - fromBytes() - fromFile() - fromIpAddress() - fromPixelblaze() PROPERTIES - id() - name() - jpeg() - byteCode() - sourceCode() PERSISTENCE - toFile() - toIpAddress() - toPixelblaze() - toEPE() - explode() Note: The constructor is not intended to be called directly; objects are created and returned from the object creation methods described above. method __init__ \u00b6 __init__ ( id : str , blob : bytes ) Initializes a new Pixelblaze Binary Pattern (PBP) object. Args: id (str): The patternId of the pattern. blob (bytes): The binary contents of the pattern. Note: This method is not intended to be called directly; use the static methods fromBytes() , fromFile() , fromIpAddress() or fromPixelblaze() methods to create and return a PBP object. property byteCode \u00b6 Returns (as a collection of bytes) the bytecode of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: bytes : The bytecode of the pattern contained in this Pixelblaze Binary Pattern (PBP). property id \u00b6 Returns the patternId of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: str : The patternId of the pattern contained in this Pixelblaze Binary Pattern (PBP). property jpeg \u00b6 Returns (as a collection of bytes) the preview JPEG of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: bytes : The preview JPEG of the pattern contained in this Pixelblaze Binary Pattern (PBP). property name \u00b6 Returns the (human-readable) name of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: str : The (human-readable) name of the pattern contained in this Pixelblaze Binary Pattern (PBP). property sourceCode \u00b6 Returns the source code of the pattern in this Pixelblaze Binary Pattern (PBP). Returns: str : The source code of the pattern as a JSON-encoded string. method explode \u00b6 explode ( path : str = None ) Exports all the components of this Pixelblaze Binary Pattern (PBP) as separate files. Args: path (str, optional): If provided, a pathname for the folder in which to export the components; otherwise derived from the patternId. Defaults to None. method fromBytes \u00b6 fromBytes ( patternId : str , blob : bytes ) \u2192 PBP Creates and returns a new Pixelblaze Binary Pattern (PBP) whose contents are initialized from a bytes array. Args: patternId (str): A patternId for the Pixelblaze Binary Pattern to be created. blob (bytes): The binary contents of the Pixelblaze Binary Pattern to be created. Returns: PBP : A new Pixelblaze Binary Pattern object. method fromFile \u00b6 fromFile ( fileName : str ) \u2192 PBP Creates and returns a new Pixelblaze Binary Pattern (PBP) whose contents are loaded from a file on disk. Args: fileName (str): The name of the file to be loaded into a Pixelblaze Binary Pattern. Returns: PBP : A new Pixelblaze Binary Pattern object. method fromIpAddress \u00b6 fromIpAddress ( ipAddress : str , patternId : str , proxyUrl : str = None ) \u2192 PBP Creates and returns a new pattern Pixelblaze Binary Pattern (PBP) whose contents are downloaded from a URL. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). patternId (str): The patternId of the Pixelblaze Binary Pattern to be loaded from the Pixelblaze. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. Returns: PBP : A new Pixelblaze Binary Pattern object. method fromPixelblaze \u00b6 fromPixelblaze ( pb : Pixelblaze , patternId : str ) \u2192 PBP Creates and returns a new pattern Pixelblaze Binary Pattern (PBP) whose contents are downloaded from an active Pixelblaze object. Args: pb (Pixelblaze): An active Pixelblaze object. patternId (str): The patternId of the Pixelblaze Binary Pattern to be loaded from the Pixelblaze. Returns: PBP : A new Pixelblaze Binary Pattern object. method toEPE \u00b6 toEPE () \u2192 EPE Creates a new Electromage Pattern Export (EPE) and initializes it from the contents of this Pixelblaze Binary Pattern (PBP). Returns: EPE : A new Electromage Pattern Export object. method toFile \u00b6 toFile ( fileName : str = None ) Saves this Pixelblaze Binary Pattern (PBP) to a file on disk. Args: fileName (str, optional): If provided, A name for the Pixelblaze Binary Pattern file to be created; otherwise, the name is derived from the patternId. Defaults to None. method toIpAddress \u00b6 toIpAddress ( ipAddress : str , proxyUrl : str = None ) Uploads this Pixelblaze Binary Pattern (PBP) to a Pixelblaze identified by its IP address. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. method toPixelblaze \u00b6 toPixelblaze ( pb : Pixelblaze ) Uploads this Pixelblaze Binary Pattern (PBP) to an active Pixelblaze object. Args: pb (Pixelblaze): An active Pixelblaze object. class EPE \u00b6 This class provides methods for importing, exporting, and manipulating the contents of an Electromage Pattern Export (EPE), as exported from the Patterns list on a Pixelblaze. CREATION - fromBytes() - fromFile() PROPERTIES - patternId() - patternName() - sourceCode() - previewImage() PERSISTENCE - toFile() - explode() Note: The constructor is not intended to be called directly; objects are created and returned from the object creation methods described above. method __init__ \u00b6 __init__ ( blob : bytes ) Initializes a new Electromage Pattern Export (EPE) object. Args: blob (bytes): The contents of the Electromage Pattern Export (EPE). Note: This method is not intended to be called directly; use the static methods fromBytes() or fromFile() to create and return an Electromage Pattern Export object. property patternId \u00b6 Returns the patternId of the pattern contained in this Electromage Pattern Export (EPE). Returns: str : The patternId of the pattern contained in this Electromage Pattern Export (EPE). property patternName \u00b6 Returns the human-readable name of the pattern in this Electromage Pattern Export (EPE). Returns: str : The human-readable name of the pattern contained in this Electromage Pattern Export (EPE). property previewImage \u00b6 Returns (as bytes) the preview JPEG of the pattern contained in this Electromage Pattern Export (EPE). Returns: bytes : The preview JPEG of the pattern contained in this Electromage Pattern Export (EPE). property sourceCode \u00b6 Returns the source code of the pattern contained in this Electromage Pattern Export (EPE). Returns: str : The sourceCode of the pattern contained in this Electromage Pattern Export (EPE). method explode \u00b6 explode ( path : str ) Exports the components of this Electromage Pattern Export (EPE) to separate files. Args: path (str): If provided, a pathname for the folder in which to export the components; otherwise derived from the patternId. Defaults to None. method fromBytes \u00b6 fromBytes ( blob : bytes ) \u2192 EPE Creates and returns a new Electromage Pattern Export (EPE) whose contents are loaded from a bytes array. Args: blob (bytes): The data from which to create the Electromage Pattern Export (EPE). Returns: EPE : A new Electromage Pattern Export (EPE) object. method fromFile \u00b6 fromFile ( fileName : str ) \u2192 EPE Creates and returns a new portable pattern EPE whose contents are loaded from a file on disk. Args: fileName (str): The name of the file from which to create the Electromage Pattern Export (EPE). Returns: EPE : A new Electromage Pattern Export (EPE) object. method toFile \u00b6 toFile ( fileName : str = None ) Saves this Electromage Pattern Export (EPE) to a file on disk. Args: fileName (str, optional): If provided, a name for the file to be created; otherwise derived from the patternId. Defaults to None. class PixelblazeEnumerator \u00b6 Listens on a network to detect available Pixelblazes, which the user can then list or open as Pixelblaze objects. Also provides time synchronization services for running synchronized patterns on a network of Pixelblazes. method __init__ \u00b6 __init__ ( hostIP = '0.0.0.0' ) Create an object that listens continuously for Pixelblaze beacon packets, maintains a list of Pixelblazes and supports synchronizing time on multiple Pixelblazes to allows them to run patterns simultaneously. Takes the IPv4 address of the interface to use for listening on the calling computer. Listens on all available interfaces if hostIP is not specified. method disableTimesync \u00b6 disableTimesync () Turns off the time synchronization -- the PixelblazeEnumerator will not automatically synchronize Pixelblazes. method enableTimesync \u00b6 enableTimesync () Instructs the PixelblazeEnumerator object to automatically synchronize time on all Pixelblazes. (Note that time synchronization is off by default when a new PixelblazeEnumerator is created.) method getPixelblazeList \u00b6 getPixelblazeList () method setDeviceTimeout \u00b6 setDeviceTimeout ( ms ) Sets the interval in milliseconds which the enumerator will wait without hearing from a device before removing it from the active devices list. The default timeout is 30000 (30 seconds). method start \u00b6 start ( hostIP ) Open socket for listening to Pixelblaze datagram traffic, set appropriate options and bind to specified interface and start listener thread. method stop \u00b6 stop () Stop listening for datagrams, terminate listener thread and close socket. This file was automatically generated via lazydocs .","title":"API"},{"location":"pixelblaze/#module-pixelblaze","text":"A library that provides a simple, synchronous interface for communicating with and controlling Pixelblaze LED controllers. This module contains the following classes: Pixelblaze : an object for controlling Pixelblazes. PBB : an object for creating and manipulating Pixelblaze Binary Backups. PBP : an object for creating and manipulating Pixelblaze Binary Patterns. EPE : an object for creating and manipulating Electromage Pattern Exports.","title":"module pixelblaze"},{"location":"pixelblaze/#class-pixelblaze","text":"The Pixelblaze class presents a simple synchronous interface to a single Pixelblaze's websocket API. The constructor takes the Pixelblaze's IPv4 address in the usual 12 digit numeric form (for example, \"192.168.4.1\"). To control multiple Pixelblazes, create multiple objects. The objective is to provide 99% coverage of the functionality of the Pixelblaze webUI, and so the supported methods are named and grouped according to the tabs of the webUI: CREATION __init__() EnumerateAddresses() EnumerateDevices() PATTERNS tab SEQUENCER section getSequencerMode / setSequencerMode getSequencerState / setSequencerState getSequencerShuffleTime / setSequencerShuffleTime getSequencerPlaylist / addToSequencerPlaylist / setSequencerPlaylist SAVED PATTERNS section getPatternList getActivePattern / setActivePattern getActiveVariables / setActiveVariables getActiveControls / setActiveControls deletePattern getPatternAsEpe EDIT tab getPatternControls getPatternSourceCode sendPatternToRenderer savePattern MAPPER tab getMapFunction / setMapFunction getMapData / setMapData SETTINGS tab getConfigSettings getConfigSequencer getConfigExpander NAME section getDeviceName / setDeviceName getDiscovery / setDiscovery getTimezone / setTimezone getAutoOffEnable / setAutoOffEnable getAutoOffStart / setAutoOffStart getAutoOffEnd / setAutoOffEnd LED section getBrightnessLimit / setBrightnessLimit getLedType / setLedType getPixelCount / setPixelCount getDataSpeed / setDataSpeed getColorOrder / setColorOrder getCpuSpeed / setCpuSpeed getNetworkPowerSave / setNetworkPowerSave UPDATES section getUpdateState / installUpdate getVersion / getVersionMajor / getVersionMinor / BACKUPS section saveBackup / restoreFromBackup reboot ADVANCED tab getBrandName / setBrandName getSimpleUiMode / setSimpleUiMode getLearningUiMode / setLearningUiMode GLOBAL CONTROLS getBrightnessSlider / setBrightnessSlider LOW-LEVEL SEND/RECEIVE wsReceive wsSendJson wsSendBinary FILESYSTEM getFileList getFile / putFile / deleteFile STATISTICS getStatistics getFPS getUptime getStorageSize getStorageUsed","title":"class Pixelblaze"},{"location":"pixelblaze/#method-__init__","text":"__init__ ( ipAddress : str , proxyUrl : str = None ) Initializes an object for communicating with and controlling a Pixelblaze. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None.","title":"method __init__"},{"location":"pixelblaze/#method-enumerateaddresses","text":"EnumerateAddresses ( timeout : int = 1500 , proxyUrl : str = None , hostIP : str = '0.0.0.0' ) \u2192 LightweightEnumerator Returns an enumerator that will iterate through all the Pixelblazes on the local network, until {timeout} milliseconds have passed with no new devices appearing. Args: hostIP (str, optional): The network interface on which to listen for Pixelblazes. Defaults to \"0.0.0.0\" meaning all available interfaces. timeout (int, optional): The amount of time in milliseconds to listen for a new Pixelblaze to announce itself (They announce themselves once per second). Defaults to 1500. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. Returns: LightweightEnumerator : A subclassed Python enumerator object that returns (as a string) the IPv4 address of a Pixelblaze, in the usual dotted-quads numeric format.","title":"method EnumerateAddresses"},{"location":"pixelblaze/#method-enumeratedevices","text":"EnumerateDevices ( timeout : int = 1500 , proxyUrl : str = None , hostIP : str = '0.0.0.0' ) \u2192 LightweightEnumerator Returns an enumerator that will iterate through all the Pixelblazes on the local network, until {timeout} milliseconds have passed with no new devices appearing. Args: hostIP (str, optional): The network interface on which to listen for Pixelblazes. Defaults to \"0.0.0.0\" meaning all available interfaces. timeout (int, optional): The amount of time in milliseconds to listen for a new Pixelblaze to announce itself (They announce themselves once per second). Defaults to 1500. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. Returns: LightweightEnumerator : A subclassed Python enumerator object that returns a Pixelblaze object for controlling a discovered Pixelblaze.","title":"method EnumerateDevices"},{"location":"pixelblaze/#method-addtosequencerplaylist","text":"addToSequencerPlaylist ( playlistContents : dict , patternId : str , duration : int ) \u2192 dict Appends a new entry to the specified playlist. Args: patternId (str): The patternId of the pattern to be played. duration (int): The number of milliseconds to play the pattern. playlistContents (dict): The results of a previous call to getSequencerPlaylist . Returns: dict : The updated playlist, which can then be sent back to the Pixelblaze with setSequencerPlaylist .","title":"method addToSequencerPlaylist"},{"location":"pixelblaze/#method-controlexists","text":"controlExists ( controlName : str , patternId : str = None ) \u2192 bool Tests whether the named control exists in the specified pattern. If no pattern is specified, the currently active pattern is assumed. Note that the active pattern can be undefined on a freshly started Pixelblaze until the pattern has been explicitly set. This function also will return False if the active pattern is not available. Args: controlName (str): The name of the control. patternId (str, optional): The pattern in which to test for the presence of the control. Defaults to None. Returns: bool : True if the specified control exists, False otherwise.","title":"method controlExists"},{"location":"pixelblaze/#method-deletefile","text":"deleteFile ( fileName : str ) \u2192 bool Deletes a file from this Pixelblaze using the HTTP API. Args: fileName (str): The pathname (as returned from getFileList ) of the file to be deleted. Returns: bool : True if the file was successfully stored; False otherwise.","title":"method deleteFile"},{"location":"pixelblaze/#method-deletepattern","text":"deletePattern ( patternId : str ) Delete a pattern saved on the Pixelblaze. Args: patternId (str): The patternId of the desired pattern.","title":"method deletePattern"},{"location":"pixelblaze/#method-getactivecontrols","text":"getActiveControls ( configSequencer : dict = None ) \u2192 dict Returns the collection of controls for the pattern currently running on the Pixelblaze. If there are no controls or no pattern has been set, returns an empty dictionary. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: dict : A dictionary containing the control names and values, with controlName as the key and controlValue as the value.","title":"method getActiveControls"},{"location":"pixelblaze/#method-getactivepattern","text":"getActivePattern ( configSequencer : dict = None ) \u2192 str Returns the ID of the pattern currently running on the Pixelblaze. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: str : The patternId of the current pattern, if any; otherwise an empty string.","title":"method getActivePattern"},{"location":"pixelblaze/#method-getactivevariables","text":"getActiveVariables () \u2192 dict Gets the names and values of all variables exported by the current pattern. Returns: dict : A dictionary containing all the variables exported by the active pattern, with variableName as the key and variableValue as the value.","title":"method getActiveVariables"},{"location":"pixelblaze/#method-getautooffenable","text":"getAutoOffEnable ( configSettings : dict = None ) \u2192 bool Returns whether the auto-Off timer is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean indicating whether the auto-Off timer is enabled.","title":"method getAutoOffEnable"},{"location":"pixelblaze/#method-getautooffend","text":"getAutoOffEnd ( configSettings : dict = None ) \u2192 str Returns the time, if any, at which the Pixelblaze will turn on the pattern when the auto-Off timer is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : A Unix time string in \"HH:MM\" format.","title":"method getAutoOffEnd"},{"location":"pixelblaze/#method-getautooffstart","text":"getAutoOffStart ( configSettings : dict = None ) \u2192 str Returns the time, if any, at which the Pixelblaze will turn off the pattern when the auto-Off timer is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : A Unix time string in \"HH:MM\" format.","title":"method getAutoOffStart"},{"location":"pixelblaze/#method-getbrandname","text":"getBrandName ( configSettings : dict = None ) \u2192 str Returns the brand name, if any, of this Pixelblaze (blank unless rebadged by a reseller). Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : The brand name.","title":"method getBrandName"},{"location":"pixelblaze/#method-getbrightnesslimit","text":"getBrightnessLimit ( configSettings : dict = None ) \u2192 int Returns the maximum brightness for the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: int : The maximum brightness, expressed as a percent value between 0 and 100 (yes, it's inconsistent with the 'brightness' settings).","title":"method getBrightnessLimit"},{"location":"pixelblaze/#method-getbrightnessslider","text":"getBrightnessSlider ( configSettings : dict = None ) \u2192 float Get the value of the UI brightness slider. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: float : A floating-point value between 0.0 and 1.0.","title":"method getBrightnessSlider"},{"location":"pixelblaze/#method-getcolorcontrolname","text":"getColorControlName ( patternId : str = None ) \u2192 str Returns the name of the specified pattern's first rgbPicker or hsvPicker control if one exists, or None otherwise. Args: patternId (str, optional): The pattern to search for color controls; or the currently active pattern if not specified. Defaults to None. Returns: str : The name of the specified pattern's first rgbPicker or hsvPicker control if one exists, or None otherwise.","title":"method getColorControlName"},{"location":"pixelblaze/#method-getcolorcontrolnames","text":"getColorControlNames ( patternId : str = None ) \u2192 list Returns a list of names of the specified pattern's rgbPicker or hsvPicker controls if any exist, None otherwise. If the pattern argument is not specified, check the currently running pattern","title":"method getColorControlNames"},{"location":"pixelblaze/#method-getcolororder","text":"getColorOrder ( configSettings : dict = None ) \u2192 < enum 'colorOrders' > Returns the color order of the LEDs connected to the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: colorOrders : The ordering for the color data sent to the LEDs.","title":"method getColorOrder"},{"location":"pixelblaze/#method-getconfigexpander","text":"getConfigExpander () \u2192 dict Retrieves the OutputExpander configuration. Returns: dict : The OutputExpander configuration as a dictionary, with settingName as the key and settingValue as the value.","title":"method getConfigExpander"},{"location":"pixelblaze/#method-getconfigsequencer","text":"getConfigSequencer () \u2192 dict Retrieves the Sequencer state. Returns: dict : The sequencer configuration as a dictionary, with settingName as the key and settingValue as the value.","title":"method getConfigSequencer"},{"location":"pixelblaze/#method-getconfigsettings","text":"getConfigSettings () \u2192 dict Returns the configuration as defined on the Settings tab of the Pixelblaze. Returns: dict : A dictionary containing the configuration settings, with settingName as the key and settingValue as the value.","title":"method getConfigSettings"},{"location":"pixelblaze/#method-getcpuspeed","text":"getCpuSpeed ( configSettings : dict = None ) \u2192 < enum 'cpuSpeeds' > Returns the CPU speed of the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: cpuSpeeds : An enumeration representing the CPU speed.","title":"method getCpuSpeed"},{"location":"pixelblaze/#method-getdataspeed","text":"getDataSpeed ( configSettings : dict = None ) \u2192 int Returns the data speed of the LEDs connected to the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: int : The data speed for communicating with the LEDs.","title":"method getDataSpeed"},{"location":"pixelblaze/#method-getdevicename","text":"getDeviceName ( configSettings : dict = None ) \u2192 str Returns the user-friendly name of the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : The user-friendly name of the Pixelblaze.","title":"method getDeviceName"},{"location":"pixelblaze/#method-getdiscovery","text":"getDiscovery ( configSettings : dict = None ) \u2192 bool Returns a boolean signifying whether the Pixelblaze announces itself to the Electromage Discovery Service. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean signifying whether the Pixelblaze announces itself to the Electromage Discovery Service.","title":"method getDiscovery"},{"location":"pixelblaze/#method-getfps","text":"getFPS ( savedStatistics : dict = None ) \u2192 float Return the speed (in Frames per Second) of the pattern rendering. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The pattern speed in FPS, as reported in a Pixelblaze statistics message.","title":"method getFPS"},{"location":"pixelblaze/#method-getfile","text":"getFile ( fileName : str ) \u2192 bytes Downloads a file from the Pixelblaze using the HTTP API. Args: fileName (str): The pathname (as returned from getFileList ) of the file to be downloaded. Returns: bytes : The contents of the file.","title":"method getFile"},{"location":"pixelblaze/#method-getfilelist","text":"getFileList ( fileTypes : fileTypes = < fileTypes . fileAll : 63 > ) \u2192 list [ str ] Returns a list of all the files of a particular type stored on the Pixelblaze's filesystem. For Pixelblazes running firmware versions lower than 2.29/3.24 (the point at which the necessary API was introduced), the list includes the names of optional configuration files that may or may not exist on a particular Pixelblaze, depending on its setup. Args: fileTypes (fileTypes, optional): A bitmasked enumeration of the fileTypes to be listed. Defaults to fileTypes.fileAll. Returns: list[str] : A list of filenames of the requested fileType.","title":"method getFileList"},{"location":"pixelblaze/#method-getlearninguimode","text":"getLearningUiMode ( configSettings : dict = None ) \u2192 bool Returns whether \"Learning UI Mode\" is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean indicating whether \"Learning UI Mode\" is enabled.","title":"method getLearningUiMode"},{"location":"pixelblaze/#method-getledtype","text":"getLedType ( configSettings : dict = None ) \u2192 < enum 'ledTypes' > Returns the type of LEDs connected to the Pixelblaze.","title":"method getLedType"},{"location":"pixelblaze/#method-getmapdata","text":"getMapData () \u2192 bytes Gets the binary representation of the pixelMap entered on the 'Mapper' tab. Returns: bytes : The binary mapData as generated by the Mapper tab of the Pixelblaze webUI.","title":"method getMapData"},{"location":"pixelblaze/#method-getmapfunction","text":"getMapFunction () \u2192 str Returns the mapFunction text used to populate the Mapper tab in the Pixelblaze UI. Returns: str : The text of the mapFunction.","title":"method getMapFunction"},{"location":"pixelblaze/#method-getnetworkpowersave","text":"getNetworkPowerSave ( configSettings : dict = None ) \u2192 bool Returns whether the \"Network Power Saving\" mode is enabled (and WiFi is disabled). Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : Whether the \"Network Power Saving\" mode is enabled.","title":"method getNetworkPowerSave"},{"location":"pixelblaze/#method-getpatternasepe","text":"getPatternAsEpe ( patternId : str ) \u2192 str Convert a stored pattern into an exportable, portable JSON format (which then needs to be saved by the caller). Args: patternId (str): The patternId of the desired pattern. Returns: str : The exported pattern as a JSON dictionary.","title":"method getPatternAsEpe"},{"location":"pixelblaze/#method-getpatterncontrols","text":"getPatternControls ( patternId : str ) \u2192 dict Returns the name and value of any UI controls exported by the specified pattern. Args: patternId (str): The patternId of the pattern. Returns: dict : A dictionary containing the control names and values, with controlName as the key and controlValue as the value.","title":"method getPatternControls"},{"location":"pixelblaze/#method-getpatternlist","text":"getPatternList ( forceRefresh : bool = False ) \u2192 dict Returns a list of all the patterns saved on the Pixelblaze. Normally reads from the cached pattern list, which is refreshed every 10 minutes by default. To change the cache refresh interval, call setCacheRefreshTime(seconds). Args: forceRefresh (bool, optional): Forces a refresh of the cached patternList. Defaults to False. Returns: dict : A dictionary of the patterns stored on the Pixelblaze, where the patternId is the key and the patternName is the value.","title":"method getPatternList"},{"location":"pixelblaze/#method-getpatternsourcecode","text":"getPatternSourceCode ( patternId : str ) \u2192 str Gets the sourceCode of a saved pattern from the Pixelblaze. Args: patternId (str): The patternId of the desired pattern. Returns: str : A string representation of a JSON dictionary containing the pattern source code.","title":"method getPatternSourceCode"},{"location":"pixelblaze/#method-getpeers","text":"getPeers () A new command, added to the API but not yet implemented as of v2.29/v3.24, that will return a list of all the Pixelblazes visible on the local network segment. Returns: TBD : To be defined once @wizard implements the function.","title":"method getPeers"},{"location":"pixelblaze/#method-getpixelcount","text":"getPixelCount ( configSettings : dict = None ) \u2192 int Returns the number of LEDs connected to the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: int : The number of LEDs connected to the Pixelblaze.","title":"method getPixelCount"},{"location":"pixelblaze/#method-getpreviewframe","text":"getPreviewFrame () \u2192 bytes Grab one of the preview frames that Pixelblaze sends after every render cycle. Returns: bytes : a collection of bytes representing pixelCount tuples containing the (R, G, B) values for each pixel in the pattern preview.","title":"method getPreviewFrame"},{"location":"pixelblaze/#method-getpreviewimage","text":"getPreviewImage ( patternId : str ) \u2192 bytes Gets the preview image (a JPEG with 150 iterations of the pattern) saved within a pattern. Args: patternId (str): The patternId of the desired pattern. Returns: bytes : A JPEG image in which each column represents a particular LED and each row represents an iteration of the pattern.","title":"method getPreviewImage"},{"location":"pixelblaze/#method-getsequencermode","text":"getSequencerMode ( configSequencer : dict = None ) \u2192 < enum 'sequencerModes' > Gets the current sequencer mode. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: sequencerModes : The sequencerMode.","title":"method getSequencerMode"},{"location":"pixelblaze/#method-getsequencerplaylist","text":"getSequencerPlaylist ( playlistId : str = '_defaultplaylist_' ) Fetches the specified playlist. At the moment, only the default playlist is supported by the Pixelblaze. Args: playlistId (str, optional): The name of the playlist (for future enhancement; currently only ' defaultplaylist ' is supported). Defaults to \" defaultplaylist \". Returns: dict : The contents of the playlist.","title":"method getSequencerPlaylist"},{"location":"pixelblaze/#method-getsequencershuffletime","text":"getSequencerShuffleTime ( configSequencer : dict = None ) \u2192 int Gets the time the Pixelblaze's sequencer will run each pattern before switching to the next. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: int : The number of milliseconds to play each pattern.","title":"method getSequencerShuffleTime"},{"location":"pixelblaze/#method-getsequencerstate","text":"getSequencerState ( configSequencer : dict = None ) \u2192 bool Gets the current sequencer run state. Args: configSequencer (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSequencer ; otherwise, fetches the configSequencer from the Pixelblaze anew. Defaults to None. Returns: bool : True if the sequencer is running; False otherwise.","title":"method getSequencerState"},{"location":"pixelblaze/#method-getsimpleuimode","text":"getSimpleUiMode ( configSettings : dict = None ) \u2192 bool Returns whether \"Simple UI Mode\" is enabled. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: bool : A boolean indicating whether \"Simple UI Mode\" is enabled.","title":"method getSimpleUiMode"},{"location":"pixelblaze/#method-getstatistics","text":"getStatistics () \u2192 dict Grab one of the statistical packets that Pixelblaze sends every second. Returns: dict : the JSON message received from the Pixelblaze.","title":"method getStatistics"},{"location":"pixelblaze/#method-getstoragesize","text":"getStorageSize ( savedStatistics : dict = None ) \u2192 int Return the available Flash storage on the Pixelblaze. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The available storage in bytes, as reported in a Pixelblaze statistics message.","title":"method getStorageSize"},{"location":"pixelblaze/#method-getstorageused","text":"getStorageUsed ( savedStatistics : dict = None ) \u2192 int Return the amount of Flash storage used on the Pixelblaze. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The used storage in bytes, as reported in a Pixelblaze statistics message.","title":"method getStorageUsed"},{"location":"pixelblaze/#method-gettimezone","text":"getTimezone ( configSettings : dict = None ) \u2192 str Returns the timezone, if any, for the Pixelblaze. Args: configSettings (dict, optional): If provided, extracts the value from the results of a previous call to getConfigSettings ; otherwise, fetches the configSettings from the Pixelblaze anew. Defaults to None. Returns: str : A standard Unix tzstring.","title":"method getTimezone"},{"location":"pixelblaze/#method-getupdatestate","text":"getUpdateState () \u2192 < enum 'updateStates' > Returns the updateState of the Pixelblaze. Returns: updateStates : An enumeration describing the updateState of the Pixelblaze.","title":"method getUpdateState"},{"location":"pixelblaze/#method-getuptime","text":"getUptime ( savedStatistics : dict = None ) \u2192 int Return the uptime (in seconds) of the Pixelblaze. Args: savedStatistics (dict, optional): If provided, extracts the value from the results of a previous call to 'getStatistics`; otherwise, fetches the statistics from the Pixelblaze anew. Defaults to None. Returns: int : The uptime in seconds, as reported in a Pixelblaze statistics message.","title":"method getUptime"},{"location":"pixelblaze/#method-geturl","text":"getUrl ( endpoint : str = None ) \u2192 str Build the URL to communicate with the Pixelblaze using an HTTP endpoint. Args: endpoint (str, optional): The HTTP endpoint. Defaults to None, which returns the URL of the Pixelblaze webUI. Returns: str : The URL of the HTTP endpoint on the Pixelblaze.","title":"method getUrl"},{"location":"pixelblaze/#method-getversion","text":"getVersion () \u2192 float Returns the firmware version of the Pixelblaze. Returns: float : The firmware version, in major.minor format.","title":"method getVersion"},{"location":"pixelblaze/#method-getversionmajor","text":"getVersionMajor () \u2192 int Returns the major version number. Returns: int : A positive integer representing the integer portion of the version number (eg. for v3.24, returns 3).","title":"method getVersionMajor"},{"location":"pixelblaze/#method-getversionminor","text":"getVersionMinor () \u2192 int Returns the minor version number. Returns: int : A positive integer representing the fractional portion of the version number (eg. for v3.24, returns 24).","title":"method getVersionMinor"},{"location":"pixelblaze/#method-installupdate","text":"installUpdate () \u2192 < enum 'updateStates' > Installs new Pixelblaze firmware, if the current updateState indicates that an update is available. Returns: updateStates : An enumeration describing the new updateState of the Pixelblaze.","title":"method installUpdate"},{"location":"pixelblaze/#method-nextsequencer","text":"nextSequencer ( saveToFlash : bool = False ) Mimics the 'Next' button in the UI. If the sequencerMode is ShuffleAll or Playlist, advances the pattern sequencer to the next pattern. Args: saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method nextSequencer"},{"location":"pixelblaze/#method-pauserenderer","text":"pauseRenderer ( doPause : bool ) Pause rendering. Lasts until unpause() is called or the Pixelblaze is reset. CAUTION: For advanced users only. Only used to stop the render engine before sending new bytecode. If you don't know exactly why you want to do this, DON'T DO IT. Args: doPause (bool): If True, pause the render engine; if False, resume it.","title":"method pauseRenderer"},{"location":"pixelblaze/#method-pausesequencer","text":"pauseSequencer ( saveToFlash : bool = False ) Mimics the 'Pause' button in the UI. Pauses the pattern sequencer, without changing the current position in the shuffle or playlist. Has no effect if the sequencer is not currently running. Args: saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method pauseSequencer"},{"location":"pixelblaze/#method-playsequencer","text":"playSequencer ( saveToFlash : bool = False ) Mimics the 'Play' button in the UI. Starts the pattern sequencer, the consequences of which will vary depending upon the sequencerMode. Args: saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method playSequencer"},{"location":"pixelblaze/#method-putfile","text":"putFile ( fileName : str , fileContents : bytes ) \u2192 bool Uploads a file to the Pixelblaze using the HTTP API. Args: fileName (str): The pathname at which to store the file. fileContents (bytes): The data to store in the file. Returns: bool : True if the file was successfully stored; False otherwise.","title":"method putFile"},{"location":"pixelblaze/#method-reboot","text":"reboot () Reboots the Pixelblaze. This is occasionally necessary, eg. to force the Pixelblaze to recognize changes to configuration files.","title":"method reboot"},{"location":"pixelblaze/#method-restorefrombackup","text":"restoreFromBackup ( fileName : str ) Restores the contents of this Pixelblaze from a Pixelblaze Binary Backup file. Args: fileName (str): The desired filename for the Pixelblaze Binary Backup.","title":"method restoreFromBackup"},{"location":"pixelblaze/#method-savebackup","text":"saveBackup ( fileName : str ) Saves the contents of this Pixelblaze into a Pixelblaze Binary Backup file. Args: fileName (str): The desired filename for the Pixelblaze Binary Backup.","title":"method saveBackup"},{"location":"pixelblaze/#method-savepattern","text":"savePattern ( previewImage : bytes , sourceCode : str , byteCode : bytes ) Saves a new pattern to the Pixelblaze filesystem. Mimics the effects of the 'Save' button. If you don't know how to generate the previewImage and byteCode components, you don't want to do this. Args: previewImage (bytes): A JPEG image in which each column represents a particular LED and each row represents an iteration of the pattern. sourceCode (str): A string representation of a JSON dictionary containing the pattern source code. byteCode (bytes): A valid blob of bytecode as generated by the Editor tab in the Pixelblaze webUI.","title":"method savePattern"},{"location":"pixelblaze/#method-sendpatterntorenderer","text":"sendPatternToRenderer ( bytecode : bytes , controls : dict = {}) Sends a blob of bytecode and a JSON dictionary of UI controls to the Renderer. Mimics the actions of the webUI code editor. Args: bytecode (bytes): A valid blob of bytecode as generated by the Editor tab in the Pixelblaze webUI. controls (dict, optional): a dictionary of UI controls exported by the pattern, with controlName as the key and controlValue as the value. Defaults to {}.","title":"method sendPatternToRenderer"},{"location":"pixelblaze/#method-sendping","text":"sendPing () \u2192 Optional [ str ] Send a Ping message to the Pixelblaze and wait for the Acknowledgement response. Returns: Union[str, None] : The acknowledgement message received from the Pixelblaze, or None if a timeout occurred.","title":"method sendPing"},{"location":"pixelblaze/#method-setactivecontrols","text":"setActiveControls ( dictControls : dict , saveToFlash : bool = False ) Sets the value of one or more UI controls exported from the active pattern. Args: dictControls (dict): A dictionary containing the values to be set, with controlName as the key and controlValue as the value. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setActiveControls"},{"location":"pixelblaze/#method-setactivepattern","text":"setActivePattern ( patternId : str , saveToFlash : bool = False ) Sets the active pattern. Args: patternId (str): The patternId of the desired pattern. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setActivePattern"},{"location":"pixelblaze/#method-setactivepatternbyname","text":"setActivePatternByName ( patternName : str , saveToFlash : bool = False ) Sets the currently running pattern using a text name. Args: patternName (str): The name of the pattern. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setActivePatternByName"},{"location":"pixelblaze/#method-setactivevariables","text":"setActiveVariables ( dictVariables : dict ) Sets the values of one or more variables exported by the current pattern. Variables not present in the current pattern are ignored. Args: dict : A dictionary containing the variables to be set, with variableName as the key and variableValue as the value.","title":"method setActiveVariables"},{"location":"pixelblaze/#method-setautooffenable","text":"setAutoOffEnable ( boolValue : bool , saveToFlash : bool = False ) Enables or disables the Pixelblaze's auto-Off scheduler. Args: boolValue (bool): A boolean indicating whether the auto-Off scheduler should be used. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setAutoOffEnable"},{"location":"pixelblaze/#method-setautooffend","text":"setAutoOffEnd ( timeValue : str , saveToFlash : bool = False ) Sets the time at which the Pixelblaze will turn on the pattern. Args: timeValue (str): A Unix time string in \"HH:MM\" format. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setAutoOffEnd"},{"location":"pixelblaze/#method-setautooffstart","text":"setAutoOffStart ( timeValue : str , saveToFlash : bool = False ) Sets the time at which the Pixelblaze will turn off the pattern. Args: timeValue (str): A Unix time string in \"HH:MM\" format. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setAutoOffStart"},{"location":"pixelblaze/#method-setbrandname","text":"setBrandName ( brandName : str ) Sets the brand name of the Pixelblaze (used by VARs to change the brand name that appears on the webUI). Args: brandName (str): The new name.","title":"method setBrandName"},{"location":"pixelblaze/#method-setbrightnesslimit","text":"setBrightnessLimit ( maxBrightness : int , saveToFlash : bool = False ) Sets the Pixelblaze's global brightness limit. Args: maxBrightness (int): The maximum brightness, expressed as a percent value between 0 and 100 (yes, it's inconsistent with the 'brightness' settings). saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setBrightnessLimit"},{"location":"pixelblaze/#method-setbrightnessslider","text":"setBrightnessSlider ( brightness : float , saveToFlash : bool = False ) Set the value of the UI brightness slider. Args: brightness (float): A floating-point value between 0.0 and 1.0. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setBrightnessSlider"},{"location":"pixelblaze/#method-setcacherefreshtime","text":"setCacheRefreshTime ( seconds : int ) Set the interval, in seconds, after which calls to getPatternList() clear the pattern cache and fetch a new pattern list from the Pixelblaze. The Default is 600 seconds (10 minutes); the maximum allowable value is clamped to a million seconds (about 277 hours, or 11.5 days). Anything else would be excessive. Args: seconds (int): The maximum age of the pattern cache.","title":"method setCacheRefreshTime"},{"location":"pixelblaze/#method-setcolorcontrol","text":"setColorControl ( controlName : str , color : dict , saveToFlash : bool = False ) Sets the 3-element color of the specified HSV or RGB color picker. Args: controlName (str): The name of the color control to change. color (dict): A dictionary of RGB or HSV colors, with all values in the range 0-1. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setColorControl"},{"location":"pixelblaze/#method-setcolororder","text":"setColorOrder ( colorOrder : colorOrders , saveToFlash : bool = False ) Sets the color order for the LEDs connected to the Pixelblaze. Args: colorOrder (colorOrders): The ordering for the color data sent to the LEDs. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setColorOrder"},{"location":"pixelblaze/#method-setcpuspeed","text":"setCpuSpeed ( cpuSpeed : cpuSpeeds ) Sets the CPU speed of the Pixelblaze. Note that this setting will not take effect until the Pixelblaze is rebooted (which can be done with the reboot function). Args: cpuSpeed (cpuSpeeds): The desired CPU speed.","title":"method setCpuSpeed"},{"location":"pixelblaze/#method-setdataspeed","text":"setDataSpeed ( speed : int , saveToFlash : bool = False ) Sets custom data rate for communicating with the LEDs. CAUTION: For advanced users only. If you don't know exactly why you want to do this, DON'T DO IT. See discussion in this thread on the Pixelblaze forum: https://forum.electromage.com/t/timing-of-a-cheap-strand/739 Args: speed (int): The data rate for communicating with the LEDs. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setDataSpeed"},{"location":"pixelblaze/#method-setdevicename","text":"setDeviceName ( name : str ) Sets the device name of the Pixelblaze. Args: name (str): The human-readable name of the Pixelblaze.","title":"method setDeviceName"},{"location":"pixelblaze/#method-setdiscovery","text":"setDiscovery ( enableDiscovery : bool , timezoneName : str = None ) Sets whether this Pixelblaze announces its presence to (and gets a clocktime reference from) the Electromage Discovery Service. Args: enableDiscovery (bool): A boolean controlling whether or not this Pixelblaze announces itself to the Electromage Discovery Service. timezoneName (str, optional): If present, a Unix tzstring specifying how to adjust the clocktime reference received from the Electromage Discovery Service. Defaults to None.","title":"method setDiscovery"},{"location":"pixelblaze/#method-setlearninguimode","text":"setLearningUiMode ( doLearningMode : bool ) Enables or disables \"Learning UI Mode\" which has additional UI help for new users. Args: doSimpleMode (bool): Whether to enable \"Learning UI Mode\".","title":"method setLearningUiMode"},{"location":"pixelblaze/#method-setledtype","text":"setLedType ( ledType : ledTypes , dataSpeed : int = None , saveToFlash : bool = False ) Defines the type of LEDs connected to the Pixelblaze. Args: ledType (ledTypes): The type of LEDs connected to the Pixelblaze. dataSpeed (int, optional): If provided, sets a custom data speed for communication with the LEDs; otherwise the defaults from the webUI are used. Defaults to None. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setLedType"},{"location":"pixelblaze/#method-setmapdata","text":"setMapData ( mapData : bytes , saveToFlash : bool = True ) Sets the binary mapData used by the Pixelblaze. Args: mapData (bytes): a blob of binary mapData as generated by the Mapper tab of the Pixelblaze webUI. saveToFlash (bool, optional): A boolean indicating whether the mapData should be saved to Flash. Defaults to True.","title":"method setMapData"},{"location":"pixelblaze/#method-setmapfunction","text":"setMapFunction ( mapFunction : str ) \u2192 bool Sets the mapFunction text used to populate the Mapper tab in the Pixelblaze UI. Note that this is does not change the mapData used by the Pixelblaze; the Mapper tab in the Pixelblaze UI compiles this text to produce binary mapData which is saved separately (see the setMapData function). Args: mapFunction (str): The text of the mapFunction. Returns: bool : True if the function text was successfully saved; otherwise False.","title":"method setMapFunction"},{"location":"pixelblaze/#method-setnetworkpowersave","text":"setNetworkPowerSave ( disableWifi : bool ) Enables or disables the WiFi connection on the Pixelblaze, which can significantly reduce power requirements for battery-powered installations. Note that this setting will not take effect until the Pixelblaze is rebooted (which can be done with the reboot function). Args: disableWifi (bool): A boolean indicating whether to disable Wifi.","title":"method setNetworkPowerSave"},{"location":"pixelblaze/#method-setpixelcount","text":"setPixelCount ( nPixels : int , saveToFlash : bool = False ) Sets the number of LEDs attached to the Pixelblaze. Note that changing the number of pixels does not recalculate the pixelMap. Args: nPixels (int): The number of pixels. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setPixelCount"},{"location":"pixelblaze/#method-setsendpreviewframes","text":"setSendPreviewFrames ( doUpdates : bool ) Set whether or not the Pixelblaze sends pattern preview frames. Args: doUpdates (bool): True sends preview frames, False stops.","title":"method setSendPreviewFrames"},{"location":"pixelblaze/#method-setsequencermode","text":"setSequencerMode ( sequencerMode : sequencerModes , saveToFlash : bool = False ) Sets the sequencer mode to one of the available sequencerModes (Off, ShuffleAll, or Playlist). Args: sequencerMode (enum): The desired sequencer mode. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setSequencerMode"},{"location":"pixelblaze/#method-setsequencerplaylist","text":"setSequencerPlaylist ( playlistContents : dict , playlistId : str = '_defaultplaylist_' ) Replaces the entire contents of the specified playlist. At the moment, only the default playlist is supported by the Pixelblaze. Args: playlistContents (dict): The new playlist contents. playlistId (str, optional): The name of the playlist (for future enhancement; currently only ' defaultplaylist ' is supported). Defaults to \" defaultplaylist \".","title":"method setSequencerPlaylist"},{"location":"pixelblaze/#method-setsequencershuffletime","text":"setSequencerShuffleTime ( nMillis : int , saveToFlash : bool = False ) Sets the time the Pixelblaze's sequencer will run each pattern before switching to the next. Args: nMillis (int): The number of milliseconds to play each pattern. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setSequencerShuffleTime"},{"location":"pixelblaze/#method-setsequencerstate","text":"setSequencerState ( sequencerState : bool , saveToFlash : bool = False ) Set the run state of the sequencer. Args: sequencerState (bool): A boolean value determining whether or not the sequencer should run. saveToFlash (bool, optional): If True, the setting is stored in Flash memory; otherwise the value reverts on a reboot. Defaults to False.","title":"method setSequencerState"},{"location":"pixelblaze/#method-setsimpleuimode","text":"setSimpleUiMode ( doSimpleMode : bool ) Enables or disables \"Simple UI Mode\" which makes the UI more suitable for non-technical audiences. Args: doSimpleMode (bool): Whether to enable \"Simple UI Mode\".","title":"method setSimpleUiMode"},{"location":"pixelblaze/#method-settimezone","text":"setTimezone ( timezoneName : str ) Sets the Pixelblaze's timezone, which specifies how to adjust the clocktime reference provided by the Electromage Discovery Service. To clear the timezone, pass an empty string. Args: timezoneName (str): A Unix tzstring specifying how to adjust the clocktime reference provided by the Electromage Discovery Service.","title":"method setTimezone"},{"location":"pixelblaze/#method-wsreceive","text":"wsReceive ( binaryMessageType : messageTypes = None ) \u2192 Union [ str , bytes , NoneType ] Wait for a message of a particular type from the Pixelblaze. Args: binaryMessageType (messageTypes, optional): The type of binary message to wait for (if None, waits for a text message). Defaults to None. Returns: Union[str, bytes, None] : The message received from the Pixelblaze (of type bytes for binaryMessageTypes, otherwise of type str), or None if a timeout occurred.","title":"method wsReceive"},{"location":"pixelblaze/#method-wssendbinary","text":"wsSendBinary ( binaryMessageType : messageTypes , blob : bytes , expectedResponse : str = None ) Send a binary command to the Pixelblaze, and optionally wait for a suitable response. Args: binaryMessageType (messageTypes, optional): The type of binary message to send. blob (bytes): The message body to be sent. expectedResponse (str, optional): If present, the initial key of the expected JSON response to the command. Defaults to None. Returns: response : The message received from the Pixelblaze (of type bytes for binaryMessageTypes, otherwise of type str), or None if a timeout occurred.","title":"method wsSendBinary"},{"location":"pixelblaze/#method-wssendjson","text":"wsSendJson ( command : dict , expectedResponse = None ) \u2192 Union [ str , bytes , NoneType ] Send a JSON-formatted command to the Pixelblaze, and optionally wait for a suitable response. Args: command (dict): A Python dictionary which will be sent to the Pixelblaze as a JSON command. expectedResponse (str, optional): If present, the initial key of the expected JSON response to the command. Defaults to None. Returns: Union[str, bytes, None] : The message received from the Pixelblaze (of type bytes for binaryMessageTypes, otherwise of type str), or None if a timeout occurred.","title":"method wsSendJson"},{"location":"pixelblaze/#class-pbb","text":"This class provides methods for importing, exporting, and manipulating the contents of a Pixelblaze Binary Backup, as created from the Settings menu on a Pixelblaze. CREATION - fromFile() - fromIpAddress() - fromPixelblaze() PROPERTIES - deviceName() - getFileList() MANIPULATION - getFile() / putFile() / deleteFile() PERSISTENCE - toFile() - toIpAddress() - toPixelblaze() Note: The constructor is not intended to be called directly; objects are created and returned from the object creation methods described above.","title":"class PBB"},{"location":"pixelblaze/#method-__init___1","text":"__init__ ( name : str , blob : bytes ) Initializes a new Pixelblaze Binary Backup (PBB) object. Args: id (str): The patternId of the pattern. blob (bytes): The binary contents of the pattern. Note: This method is not intended to be called directly; use the static methods fromFile() , fromIpAddress() or fromPixelblaze() methods to create and return a Pixelblaze Binary Backup (PBB) object.","title":"method __init__"},{"location":"pixelblaze/#property-devicename","text":"Gets the user-friendly name of the device from which this PixelBlazeBackup was made. Returns: str : The user-friendly name of the device from which this PixelBlazeBackup was made.","title":"property deviceName"},{"location":"pixelblaze/#method-deletefile_1","text":"deleteFile ( fileName : str ) Removes a particular file from this PixelBlazeBackup. Args: fileName (str): The name of the file to be deleted.","title":"method deleteFile"},{"location":"pixelblaze/#method-fromfile","text":"fromFile ( fileName : str ) \u2192 PBB Creates and returns a new Pixelblaze Binary Backup whose contents are loaded from a file on disk. Args: fileName (str): The filename of the Pixelblaze Binary Backup. Returns: PBB : A new Pixelblaze Binary Backup object.","title":"method fromFile"},{"location":"pixelblaze/#method-fromipaddress","text":"fromIpAddress ( ipAddress : str , proxyUrl : str = None , verbose : bool = False ) \u2192 PBB Creates and returns a new Pixelblaze Binary Backup whose contents are loaded from a Pixelblaze specified by IP address. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False. Returns: PBB : A new Pixelblaze Binary Backup object.","title":"method fromIpAddress"},{"location":"pixelblaze/#method-frompixelblaze","text":"fromPixelblaze ( pb : Pixelblaze , verbose : bool = False ) \u2192 PBB Creates and returns a new Pixelblaze Binary Backup whose contents are loaded from an existing Pixelblaze object. Args: pb (Pixelblaze): A Pixelblaze object. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False. Returns: PBB : A new Pixelblaze Binary Backup object.","title":"method fromPixelblaze"},{"location":"pixelblaze/#method-getfile_1","text":"getFile ( fileName : str ) \u2192 bytes Returns the contents of a particular file contained in this PixelBlazeBackup. Args: fileName (str): The name of the file to be returned. Returns: bytes : The contents of the requested file.","title":"method getFile"},{"location":"pixelblaze/#method-getfilelist_1","text":"getFileList ( fileTypes : fileTypes = < fileTypes . fileAll : 63 > ) \u2192 list [ str ] Returns a sorted list of the files contained in this PixelBlazeBackup. Args: fileTypes (fileTypes, optional): An bitwise enumeration indicating the types of files to list. Defaults to fileTypes.fileAll. Returns: list[str] : A list of filenames.","title":"method getFileList"},{"location":"pixelblaze/#method-putfile_1","text":"putFile ( fileName : str , fileContents : bytes ) Inserts or replaces the contents of a particular file into this PixelBlazeBackup. Args: fileName (str): The name of the file to be stored. fileContents (bytes): The contents of the file to be stored.","title":"method putFile"},{"location":"pixelblaze/#method-tofile","text":"toFile ( fileName : str = None , explode : bool = False ) Writes this Pixelblaze Binary Backup to a file on disk. Args: fileName (str, optional): If specified, the filename of the Pixelblaze Binary Backup to be created; otherwise the originating Pixelblaze name is used. Defaults to None. explode (bool, optional): If specified, also exports the files within the Pixelblaze Binary Backup to a subdirectory. Defaults to False.","title":"method toFile"},{"location":"pixelblaze/#method-toipaddress","text":"toIpAddress ( ipAddress : str , proxyUrl : str = None , verbose : bool = False ) Restores the contents of this PixelBlazeBackup to a Pixelblaze identified by IP Address. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\").. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False.","title":"method toIpAddress"},{"location":"pixelblaze/#method-topixelblaze","text":"toPixelblaze ( pb : Pixelblaze , verbose : bool = False ) Uploads the contents of this PixelBlazeBackup to the destination Pixelblaze. Args: pb (Pixelblaze): A Pixelblaze object. verbose (bool, optional): A boolean specifying whether to print detailed progress statements. Defaults to False.","title":"method toPixelblaze"},{"location":"pixelblaze/#class-pbp","text":"This class represents a Pixelblaze Binary Pattern, as stored on the Pixelblaze filesystem or contained in a Pixelblaze Binary Backup. CREATION - fromBytes() - fromFile() - fromIpAddress() - fromPixelblaze() PROPERTIES - id() - name() - jpeg() - byteCode() - sourceCode() PERSISTENCE - toFile() - toIpAddress() - toPixelblaze() - toEPE() - explode() Note: The constructor is not intended to be called directly; objects are created and returned from the object creation methods described above.","title":"class PBP"},{"location":"pixelblaze/#method-__init___2","text":"__init__ ( id : str , blob : bytes ) Initializes a new Pixelblaze Binary Pattern (PBP) object. Args: id (str): The patternId of the pattern. blob (bytes): The binary contents of the pattern. Note: This method is not intended to be called directly; use the static methods fromBytes() , fromFile() , fromIpAddress() or fromPixelblaze() methods to create and return a PBP object.","title":"method __init__"},{"location":"pixelblaze/#property-bytecode","text":"Returns (as a collection of bytes) the bytecode of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: bytes : The bytecode of the pattern contained in this Pixelblaze Binary Pattern (PBP).","title":"property byteCode"},{"location":"pixelblaze/#property-id","text":"Returns the patternId of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: str : The patternId of the pattern contained in this Pixelblaze Binary Pattern (PBP).","title":"property id"},{"location":"pixelblaze/#property-jpeg","text":"Returns (as a collection of bytes) the preview JPEG of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: bytes : The preview JPEG of the pattern contained in this Pixelblaze Binary Pattern (PBP).","title":"property jpeg"},{"location":"pixelblaze/#property-name","text":"Returns the (human-readable) name of the pattern contained in this Pixelblaze Binary Pattern (PBP). Returns: str : The (human-readable) name of the pattern contained in this Pixelblaze Binary Pattern (PBP).","title":"property name"},{"location":"pixelblaze/#property-sourcecode","text":"Returns the source code of the pattern in this Pixelblaze Binary Pattern (PBP). Returns: str : The source code of the pattern as a JSON-encoded string.","title":"property sourceCode"},{"location":"pixelblaze/#method-explode","text":"explode ( path : str = None ) Exports all the components of this Pixelblaze Binary Pattern (PBP) as separate files. Args: path (str, optional): If provided, a pathname for the folder in which to export the components; otherwise derived from the patternId. Defaults to None.","title":"method explode"},{"location":"pixelblaze/#method-frombytes","text":"fromBytes ( patternId : str , blob : bytes ) \u2192 PBP Creates and returns a new Pixelblaze Binary Pattern (PBP) whose contents are initialized from a bytes array. Args: patternId (str): A patternId for the Pixelblaze Binary Pattern to be created. blob (bytes): The binary contents of the Pixelblaze Binary Pattern to be created. Returns: PBP : A new Pixelblaze Binary Pattern object.","title":"method fromBytes"},{"location":"pixelblaze/#method-fromfile_1","text":"fromFile ( fileName : str ) \u2192 PBP Creates and returns a new Pixelblaze Binary Pattern (PBP) whose contents are loaded from a file on disk. Args: fileName (str): The name of the file to be loaded into a Pixelblaze Binary Pattern. Returns: PBP : A new Pixelblaze Binary Pattern object.","title":"method fromFile"},{"location":"pixelblaze/#method-fromipaddress_1","text":"fromIpAddress ( ipAddress : str , patternId : str , proxyUrl : str = None ) \u2192 PBP Creates and returns a new pattern Pixelblaze Binary Pattern (PBP) whose contents are downloaded from a URL. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). patternId (str): The patternId of the Pixelblaze Binary Pattern to be loaded from the Pixelblaze. proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None. Returns: PBP : A new Pixelblaze Binary Pattern object.","title":"method fromIpAddress"},{"location":"pixelblaze/#method-frompixelblaze_1","text":"fromPixelblaze ( pb : Pixelblaze , patternId : str ) \u2192 PBP Creates and returns a new pattern Pixelblaze Binary Pattern (PBP) whose contents are downloaded from an active Pixelblaze object. Args: pb (Pixelblaze): An active Pixelblaze object. patternId (str): The patternId of the Pixelblaze Binary Pattern to be loaded from the Pixelblaze. Returns: PBP : A new Pixelblaze Binary Pattern object.","title":"method fromPixelblaze"},{"location":"pixelblaze/#method-toepe","text":"toEPE () \u2192 EPE Creates a new Electromage Pattern Export (EPE) and initializes it from the contents of this Pixelblaze Binary Pattern (PBP). Returns: EPE : A new Electromage Pattern Export object.","title":"method toEPE"},{"location":"pixelblaze/#method-tofile_1","text":"toFile ( fileName : str = None ) Saves this Pixelblaze Binary Pattern (PBP) to a file on disk. Args: fileName (str, optional): If provided, A name for the Pixelblaze Binary Pattern file to be created; otherwise, the name is derived from the patternId. Defaults to None.","title":"method toFile"},{"location":"pixelblaze/#method-toipaddress_1","text":"toIpAddress ( ipAddress : str , proxyUrl : str = None ) Uploads this Pixelblaze Binary Pattern (PBP) to a Pixelblaze identified by its IP address. Args: ipAddress (str): The Pixelblaze's IPv4 address in the usual dotted-quads numeric format (for example, \"192.168.4.1\"). proxyUrl (str, optional): The url of a proxy, if required, in the format \"protocol://ipAddress:port\" (for example, \"http://192.168.0.1:8888\"). Defaults to None.","title":"method toIpAddress"},{"location":"pixelblaze/#method-topixelblaze_1","text":"toPixelblaze ( pb : Pixelblaze ) Uploads this Pixelblaze Binary Pattern (PBP) to an active Pixelblaze object. Args: pb (Pixelblaze): An active Pixelblaze object.","title":"method toPixelblaze"},{"location":"pixelblaze/#class-epe","text":"This class provides methods for importing, exporting, and manipulating the contents of an Electromage Pattern Export (EPE), as exported from the Patterns list on a Pixelblaze. CREATION - fromBytes() - fromFile() PROPERTIES - patternId() - patternName() - sourceCode() - previewImage() PERSISTENCE - toFile() - explode() Note: The constructor is not intended to be called directly; objects are created and returned from the object creation methods described above.","title":"class EPE"},{"location":"pixelblaze/#method-__init___3","text":"__init__ ( blob : bytes ) Initializes a new Electromage Pattern Export (EPE) object. Args: blob (bytes): The contents of the Electromage Pattern Export (EPE). Note: This method is not intended to be called directly; use the static methods fromBytes() or fromFile() to create and return an Electromage Pattern Export object.","title":"method __init__"},{"location":"pixelblaze/#property-patternid","text":"Returns the patternId of the pattern contained in this Electromage Pattern Export (EPE). Returns: str : The patternId of the pattern contained in this Electromage Pattern Export (EPE).","title":"property patternId"},{"location":"pixelblaze/#property-patternname","text":"Returns the human-readable name of the pattern in this Electromage Pattern Export (EPE). Returns: str : The human-readable name of the pattern contained in this Electromage Pattern Export (EPE).","title":"property patternName"},{"location":"pixelblaze/#property-previewimage","text":"Returns (as bytes) the preview JPEG of the pattern contained in this Electromage Pattern Export (EPE). Returns: bytes : The preview JPEG of the pattern contained in this Electromage Pattern Export (EPE).","title":"property previewImage"},{"location":"pixelblaze/#property-sourcecode_1","text":"Returns the source code of the pattern contained in this Electromage Pattern Export (EPE). Returns: str : The sourceCode of the pattern contained in this Electromage Pattern Export (EPE).","title":"property sourceCode"},{"location":"pixelblaze/#method-explode_1","text":"explode ( path : str ) Exports the components of this Electromage Pattern Export (EPE) to separate files. Args: path (str): If provided, a pathname for the folder in which to export the components; otherwise derived from the patternId. Defaults to None.","title":"method explode"},{"location":"pixelblaze/#method-frombytes_1","text":"fromBytes ( blob : bytes ) \u2192 EPE Creates and returns a new Electromage Pattern Export (EPE) whose contents are loaded from a bytes array. Args: blob (bytes): The data from which to create the Electromage Pattern Export (EPE). Returns: EPE : A new Electromage Pattern Export (EPE) object.","title":"method fromBytes"},{"location":"pixelblaze/#method-fromfile_2","text":"fromFile ( fileName : str ) \u2192 EPE Creates and returns a new portable pattern EPE whose contents are loaded from a file on disk. Args: fileName (str): The name of the file from which to create the Electromage Pattern Export (EPE). Returns: EPE : A new Electromage Pattern Export (EPE) object.","title":"method fromFile"},{"location":"pixelblaze/#method-tofile_2","text":"toFile ( fileName : str = None ) Saves this Electromage Pattern Export (EPE) to a file on disk. Args: fileName (str, optional): If provided, a name for the file to be created; otherwise derived from the patternId. Defaults to None.","title":"method toFile"},{"location":"pixelblaze/#class-pixelblazeenumerator","text":"Listens on a network to detect available Pixelblazes, which the user can then list or open as Pixelblaze objects. Also provides time synchronization services for running synchronized patterns on a network of Pixelblazes.","title":"class PixelblazeEnumerator"},{"location":"pixelblaze/#method-__init___4","text":"__init__ ( hostIP = '0.0.0.0' ) Create an object that listens continuously for Pixelblaze beacon packets, maintains a list of Pixelblazes and supports synchronizing time on multiple Pixelblazes to allows them to run patterns simultaneously. Takes the IPv4 address of the interface to use for listening on the calling computer. Listens on all available interfaces if hostIP is not specified.","title":"method __init__"},{"location":"pixelblaze/#method-disabletimesync","text":"disableTimesync () Turns off the time synchronization -- the PixelblazeEnumerator will not automatically synchronize Pixelblazes.","title":"method disableTimesync"},{"location":"pixelblaze/#method-enabletimesync","text":"enableTimesync () Instructs the PixelblazeEnumerator object to automatically synchronize time on all Pixelblazes. (Note that time synchronization is off by default when a new PixelblazeEnumerator is created.)","title":"method enableTimesync"},{"location":"pixelblaze/#method-getpixelblazelist","text":"getPixelblazeList ()","title":"method getPixelblazeList"},{"location":"pixelblaze/#method-setdevicetimeout","text":"setDeviceTimeout ( ms ) Sets the interval in milliseconds which the enumerator will wait without hearing from a device before removing it from the active devices list. The default timeout is 30000 (30 seconds).","title":"method setDeviceTimeout"},{"location":"pixelblaze/#method-start","text":"start ( hostIP ) Open socket for listening to Pixelblaze datagram traffic, set appropriate options and bind to specified interface and start listener thread.","title":"method start"},{"location":"pixelblaze/#method-stop","text":"stop () Stop listening for datagrams, terminate listener thread and close socket. This file was automatically generated via lazydocs .","title":"method stop"},{"location":"pixelblazeProtocol/","text":"The Pixelblaze protocol \u00b6 being an unofficial and apocryphal exegesis of the websocket and HTTP traffic between a Pixelblaze and its webUI Disclaimer \u00b6 This document was produced for informational purposes only; it is neither sanctioned nor recommended by @wizard. Used incorrectly, some of these commands could cause data loss, brick/shorten the lifespan of a Pixelblaze, or cause excessive power consumption which may damage any connected LEDs or in extreme cases create a fire hazard. However ...the insights described below were gained from observation of the conversation taking place between a correctly-configured Pixelblaze and its user interface webpage, and within that context the risk of repeating commands already known to be valid is minimal. There is no guarantee that this information has been, is, or will remain correct for your particular configuration. Any use is solely at the user's own risk. General observations \u00b6 Notes \u00b6 The Pixelblaze runs both a webserver (listening on :80) and a websocket server (listening on port 81). When a client webbrowser connects to the Pixelblaze webUI on port 80, the webserver returns the file index.html.gz which contains the webUI application. The webbrowser unpacks and executes the webUI application (written in javascript), and most of the subsequent interactions take place over the websocket (the exceptions are structured as REST-ish commands to GET , POST or DELETE information using HTTP). In general, the websocket protocol is client-server with the webUI making a request and, in most cases, the Pixelblaze sending a response. HOWEVER, the Pixelblaze also sends four packets out-of-band which can interrupt the request/response flow: After each render cycle, a preview frame representing the pixels of the currently executing pattern are sent as a binary packet of type 05 ( previewFrame ) whose format is described below; Whenever the current pattern is changed by the sequencer, the Pixelblaze sends the new state of the sequencer: {\"activeProgram\":{\"activeProgramId\":patternId,\"controls\":{}},\"sequencerMode\":sequencerMode,\"runSequencer\":true,\"playlist\":{\"position\":0,\"id\":\"\\_defaultplaylist\\_\",\"ms\":sequencerTime,\"remainingMs\":countdown}} ; Once every second, the Pixelblaze sends a message with diagnostics and statistics: {\"fps\":41.95804,\"vmerr\":0,\"vmerrpc\":-1,\"mem\":2111,\"exp\":0,\"renderType\":2,\"uptime\":48156306,\"storageUsed\":795419,\"storageSize\":2949250} ; and The response to the {\"getConfig\":true} request consists of three separate messages (detailed below) that can come out of sequence. Most websocket messages are JSON strings, but a few messages are sent as binary packets containing a messageType byte, a continuationFlags byte, and dataBlock s of varying lengths. messageTypes are: 01 = putSourceCode (from webUI to Pixeblaze) 03 = putByteCode (from webUI to Pixelblaze) 04 = previewImage (from webUI to Pixelblaze) 05 = previewFrame (from Pixelblaze to webUI) \u2013 this message type does not have continuation flags 06 = getSourceCode (from Pixelblaze to webUI) 07 = getProgramList (from webUI to Pixelblaze) 08 = putPixelMap (from webUI to Pixelblaze) 09 = expanderConfig (from webUI to Pixelblaze AND from Pixelblaze to webUI) continuationFlags are bitwise OR'ed together (a message that fits in a single websocket frame will have _continuationFlags* frameFirst | frameLast , otherwise the message is assembled by concatenating packets until frameLast is seen): 01 = frameFirst 02 = frameMiddle 04 = frameLast Upon loading, the webUI requests the current configuration of the Pixelblaze with: {\"sendUpdates\":false,\"getConfig\":true,\"listPrograms\":true,\"getUpgradeState\":true} . The response to getConfig is three packets containing: the settingsConfig : {\"name\":name,\"brandName\":brandName,\"pixelCount\":pixelCount,\"brightness\":uiBrightness,\"maxBrightness\":maxBrightness,\"colorOrder\":\"GRB\",\"dataSpeed\":3500000,\"ledType\":2,\"sequenceTimer\":15,\"sequencerMode\":0,\"runSequencer\":false,\"simpleUiMode\":false,\"learningUiMode\":false,\"discoveryEnable\":true,\"timezone\":tzString,\"autoOffEnable\":false,\"autoOffStart\":\"00:00\",\"autoOffEnd\":\"00:00\",\"cpuSpeed\":240,\"networkPowerSave\":false,\"mapperFit\":1,\"exp\":0,\"ver\":\"3.24\"} ; the sequencerConfig : {\"activeProgram\":{\"name\":\"Editor\",\"activeProgramId\":null,\"controls\":{}},\"sequencerMode\":0,\"runSequencer\":false} ; and the _ExpanderConfig: (a binary message with messageType expanderConfig (09) , whose contents are described below). The response to listPrograms is detailed under the Patterns tab. The response to getUpgradeState is {\"upgradeState\":{\"code\":upgradeState}} , where upgradeState can be: 0 ( unknown ), 1 ( checking ), 2 ( inProgress ), 3 ( updateError ), 4 ( upToDate ), 5 ( updateAvailable ), or 6 ( updateComplete ). If the upgradeState is 5 ( updateAvailable ), clicking the \"Update\" button sends {\"upgradeVersion\":\"update\"} and then polls with getUpgradeState until the returned upgradeState is 2, 3, or 4. Two sections are present at the top of the screen on all tabs: The \"Brightness\" slider, when changed, sends {\"brightness\":0..100} . UI controls (if any) for the active pattern, when changed, send the new values as: {\"setVar\":{varName:varValue}} . Patterns tab \u00b6 Notes \u00b6 The Patterns tab (which is the default page when the webUI is loaded) requests the pattern list with: {\"getProgramList\":true} ; the response is one or more binary packets of type 07 ( getProgramList ). For each pattern in the list, the webUI then requests its preview image with {\"getPreviewImg\":patternId} ; the response is a JPG embedded in one or more packets of type 04 ( previewImage ). Clicking on a pattern name sends: {\"setActivePattern\":patternId} . After about 30 seconds, the webUI resends the command with a further parameter to save the pattern selection to flash: {\"setActivePattern\":patternId, \"save\":true} . Sequencer mode can be: \"Off\": (shown above) where the \"Off\" button sends {\"sequencerMode\":0} with no response. \"Shuffle All\": \"Shuffle All\" button sends {\"sequencerMode\":1} which also starts the sequencer. Changing the \"seconds per pattern\" field sends {\"sequenceTimer\":30} \"Pause\" button sends {\"runSequencer\":false} . \"Play\" button sends {\"runSequencer\":true} . \"Next\" button sends {\"nextProgram\":true} which also starts the sequencer. The response to all shuffle commands is the current state of the sequencer (the same message that arrives out-of-band). \"Playlist\": \"Playlist\" button sends {\"sequencerMode\":2} which also starts the sequencer. \"Pause\", \"Play\" and \"Next\" buttons work the same as above. \"Restart\" button sends {\"playlist\":{\"position\":0}} . \"Previous\" button sends {\"playlist\":{\"position\":currentNumber - 1}} where currentNumber came from the most recently announced state of the sequencer. \"Add\" button on pattern sends {\"playlist\":{\"id\":\"\\_defaultplaylist\\_\",\"items\":[{\"id\":patternId,\"ms\":durationInMs=30000}]},\"save\":true} . Adding a pattern, changing the duration, changing the order, or deleting a playlist pattern resends the whole list: {\"playlist\":{\"id\":\"\\_defaultplaylist\\_\",\"items\":[{\"id\":patternId1,\"ms\":durationInMs=30000}, {\"id\":patternId2,\"ms\":durationInMs=30000}, \u2026]},\"save\":true} . The response to all playlist commands is the current state of the sequencer (the same message that arrives out-of-band). Edit tab \u00b6 Notes \u00b6 Any changes within the code pane cause the pattern code to be compiled, and if successful, the bytecode is sent to the Pixelblaze with messageType 03 ( putBytecode ) and it begins executing immediately. The pattern preview window at the top (which appears on all tabs) is updated every time the Pixelblaze sends a new binary packet of type 05 ( previewFrame ), which can arrive at any time. \"Save\" button sends three binary messages of type 04 ( PreviewImage ), 01 ( putSourceCode ), and 03 ( putByteCode ); if successful, the response is {\"ack\":1,\"saveProgramSourceFile\":true} . Brightness slider sends {\"brightness\":0..100} . \"Vars Watch\" button sends {\"getVars\":true|false} . Mapper tab \u00b6 Notes \u00b6 When the tab is loaded, the webUI fetches the mapFunction from the Pixelblaze with a HTTP GET to the /pixelmap.txt endpoint. Any changes to the mapFunction in the code pane are immediately compiled into mapData and, if successful, cause a binary message of type 08 ( putPixelMap ) to be sent to the Pixelblaze where it is immediately available to the render engine. The \"save\" button sends {\"saveMap\":true} which tells the Pixelblaze to save the most-recently-uploaded mapData to flash as /pixelmap.dat ; it also saves the mapFunction to flash as /pixelmap.txt by doing a a HTTP POST to the /edit endpoint with headers Content-Type: application/x-www-form-urlencoded; charset=UTF-8 and the text of the mapper function as the body. Settings tab (v2) \u00b6 Notes \u00b6 Setting the LED type to \"Output Expander\" reveals another panel: Whenever any field is changed (including the \"Add Board\" and \"Remove\" buttons), the webUI recompiles the table into a binary expanderData blob (details of which are below) and resends it to the Pixelblaze as a binary message of type 08 ( ExpanderSettings ). Settings tab (v3) \u00b6 Notes \u00b6 Essentially the same as v2, with the addition of the \"Cpu Speed\" field (which sends {\"cpuSpeed\":\"80|160|240\"} ) and the \"disableWifi\" field (which sends {\"networkPowerSave\":true|false} ). Wifi tab (v3 only) \u00b6 Notes: Page load does a HTTP GET to the /wifistatus endpoint to populate the status field. \"Scan\" button does a HTTP GET to the /wifiscan endpoint to populate the access point list. \"Submit\" button does a HTTP POST to the /wifisave endpoint to save the Wifi configuration. These endpoints are described in further detail below. Advanced Settings tab \u00b6 Notes \u00b6 The \"Advanced Settings\" tab is only visible when the webUI is loaded with the \"/?setup\" URL. The \"Brand Name\" field sends {\"brandName\":newName} . The \"Simple UI\" checkbox sends {\"simpleUiMode\":true|false} . The \"Learning UI mode\" checkbox sends {\"learningUiMode\":true|false} . Binary formats \u00b6 previewFrame message \u00b6 Taking into account the packet framing described above (of which the previewFrame is unique in that it does not have a continuationFlags byte), the body of the previewFrame message consists of groupings of three bytes (corresponding to the Red , Green and Blue values) for each of the pixelCount pixels configured; for example the previewFrame for a 64-pixel setup would contain 1 (header) + 3 (RGB) * 64 (pixels) = 193 bytes. 0 1 2 3 4 5 ... [ red_pixel0, green_pixel0, blue_pixel0 ] [ red_pixel1, green_pixel1, blue_pixel2 ] ... mapData message \u00b6 Taking into account the packet framing described above, the body of the mapData message consists of a header containing three 32-bit longwords in little-endian format, representing the formatVersion (1 or 2), the number of dimensions a/k/a numDimensions (1, 2 or 3), and the dataSize in bytes (which is calculated as formatVersion * numDimensions * numElements ). The remainder of the message body contains numElements tuples of numDimensions values, which are either 8-bit ( formatVersion =1) or 16-bit integers in little-endian format ( formatVersion =2), representing the location of each particular pixel on that particular axis (X, Y or Z). Each of these integers then needs to be divided by the respective maxInt for the formatVersion (255 for formatVersion =1, 65535 for formatVersion =2) to obtain a floating-point world coordinate between 0 and 1. For example, a 3-dimensional map with formatVersion =1 and 40 pixels would look like: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ... [ 1 0 0 0 ] [ 3 0 0 0 ] [ 40 0 0 0 ] [ X_0, Y_0, Z_0 ] [ X_1, Y_1, Z_1 ] ... And a 2-dimensional map with formatVersion =2 and 24 pixels would look like: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ... [ 2 0 0 0 ] [ 2 0 0 0 ] [ 24 0 0 0 ] [ lsbX_0 msbX_0, lsbY_0 msbY_0 ] ... expanderConfig message \u00b6 Taking into account the packet framing described above, the body of the expanderConfig message consists of a versionNumber byte of 05, followed by one or more 96-byte tables corresponding to each output expander (8 channels * 12 bytes/channel). For example, defining two expanders like this: produces a table like this, which (according to the data structures found in the outputExpander source code ) can be decoded as follows: Where: addx|chan is a packed byte ( addx:5|chan:3 ) combining the expander address and the channel index; ledType is an enumeration with: 0= \u2018notUsed\u2019 , 1= \u2018WS2812B\u2019 , 2= \u2018drawAll\u2019 , 3= \u2018APA102 Data\u2019 , 4= \u2018APA102 Clock\u2019 ; numColors is either 3 (for R/G/B) or 4 (for R/G/B/W); colorOrder is a packed byte ( R:2|G:2|B:2|W:2 ) containing four 2-bit numbers indicating the order in which the colors appear (0=first, 3=last). The possible permutations are: 0x24 = \u2018RGB\u2019 , 0x18 = \u2018RBG\u2019 , 0x09 = \u2018BRG\u2019 , 0x06 = \u2018BGR\u2019 , 0x21 = \u2018GRB\u2019 , 0x12 = \u2018GBR\u2019 , 0xE4 = \u2018RGBW\u2019 , and 0xE1 = \u2018GRBW\u2019 ; pixelCount is the number of pixels on this channel; startIndex is the first address in the range to be directed to this channel; and the four bytes marked as \u2018notUsed\u2019 represent the clockSpeed for the channel, which is not currently supported in either the UI or the outputExpander driver but may be used in a future version. Easy Pattern Export (EPE) files \u00b6 EPE files are a portable way of moving patterns between Pixelblazes, even if they have different versions and architectures. EPE files can be exported from the Pixelblaze to the local computer from the \"Patterns\" tab, and imported from the local computer to another Pixelblaze on the \"Edit\" tab (from which it needs to be saved onto the new Pixelblaze). Note: The Pixelblaze pattern language has evolved over time; patterns cannot be successfully imported onto a Pixelblaze whose firmware version does not support the language constructs (eg. array initializers, coordinate translations) they use. The file contents consist of a JSON dictionary containing: the user-assigned name of the pattern; an immutable id for the pattern generated on the Pixelblaze where it was first saved; a JSON dictionary of sources for the pattern, of which there is only one, named main , which contains the javascript-like source code of the pattern; and a base64-encoded JPEG preview image of the pattern, where each vertical row represents the state of the pixels for a single render cycle. When opened in a text editor, an EPE looks something like this: { \"name\": \"Default New Pattern\", \"id\": \"keSLmg6tCWGPMvb85\", \"sources\": { \"main\": \"export function render(index) {\\n hsv(time(.1) + index/pixelCount, 1, 1)\\n}\" }, \"preview\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQo...AAAAB//2Q==\" } EPE files do not contain the current values of the UI controls, which would have been nice. Those can be exported and imported from the Pixelblaze filesystem separately using the REST-ish HTTP API. Pixelblaze Binary Pattern (PBP) files \u00b6 Pixelblaze saves patterns to the flash filesystem as a binary blob with the filename /{patternId} . These blobs can be exported and imported from the Pixelblaze filesystem using the REST-ish HTTP API, which is the mechanism used by the Firestorm clone command and the Pixelblaze backup / restore buttons. A PBP blob begins with a header consisting of nine 32-bit longwords representing: The format versionNumber ; the offset to and length of the pattern's Name ; the offset to and length of the pattern's previewImage ; the offset to and length of the pattern's byteCode ; and the offset to and length of the pattern's sourceCode . These components occupy the remainder of the blob. Pixelblaze Binary Backup (PBB) files \u00b6 Pixelblaze can also, from firmware versions 2.29/3.24 onwards, import and export the entire contents of the flash filesystem -- patterns, playlists and configuration, but not the webUI file itself -- to a local computer as a Pixelblaze Binary Backup. This can be useful for archiving the state of a Pixelblaze, restoring its contents after an experiment gone wrong, or even provisioning multiple Pixelblazes with identical setups (though it would be a good idea afterwards to give them all different names). The file contents consist of a JSON dictionary containing a single element, files , which is another JSON dictionary containing a key/value tuple (where the key is the filename and the value is the file contents, encoded in base64) for each file stored in this Pixelblaze Binary Backup. For example, a Pixelblaze Binary Backup for a Pixelblaze containing 11 patterns might look like this: { \"files\": { \"/apple-touch-icon.png\": \"iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAMAAAAKE/YAAAADAFBMVEUA...\", \"/config.json\": \"eyJuYW1lIjoiUGl4ZWxibGF6ZV84eDhtYXRyaXgiLCJicmFuZE5hbWUiOiIiLCJwa...\", \"/favicon.ico\": \"AAABAAMAMDAAAAEAIACoJQAANgAAACAgAAABACAAqBAAAN4lAAAQEAAAAQAgAGgEA...\", \"/l/_defaultplaylist_\": \"eyJpdGVtcyI6W119\", \"/p/4ANH2jwPKj8nasXeD\": \"AgAAACQAAAASAAAANgAAAK8DAADlAwAARwkAACwNAABuCwAAMUQgQXVyb...\", \"/p/4ANH2jwPKj8nasXeD.c\": \"eyJzbGlkZXJTcGVlZCI6MC44NTg0LCJzbGlkZXJXaWR0aCI6MC43NzU...\", \"/p/4u26f8x7GRsBjQeBn\": \"AgAAACQAAAAMAAAAMAAAAJUTAADFEwAAKAIAAO0VAAA6BAAAZ2xpdGNoI...\", \"/p/5aWMwDm9ALfJniBXi\": \"AgAAACQAAAATAAAANwAAALEMAADoDAAAIAEAAAgOAADQAAAAMUQgbWFyY...\", \"/p/7eeGvKegHGmCD5QAd\": \"AgAAACQAAAAIAAAALAAAAGAJAACMCQAAnQEAACkLAACYBwAAcHVsc2UgM...\", \"/p/7rkpwJrEQBffHPsye\": \"AgAAACQAAAAQAAAANAAAAIAPAAC0DwAALAEAAOAQAAC8AgAAY29sb3IgZ...\", \"/p/8EX6T2cpfA8WxLEEF\": \"AgAAACQAAAAMAAAAMAAAAEoPAAB6DwAADAEAAIYQAADMAQAAcmFpbmJvd...\", \"/p/HuAhJN9zTJKZEinMH\": \"AgAAACQAAAAEAAAAKAAAAK8DAADXAwAAXwAAADYEAABmAQAAIU9mZv/Y/...\", \"/p/gvM2bmyhQFm6bXd93\": \"AgAAACQAAAAVAAAAOQAAABkIAABSCAAAxgYAABgPAAB0BwAAQW5pbWF0Z...\", \"/p/gvM2bmyhQFm6bXd93.c\": \"eyJzbGlkZXJOdW1MaW5lcyI6MC4wNTg0LCJzbGlkZXJMaW5lV2lkdGg...\", \"/p/mvkAmMHcyPsNbPxyt\": \"AgAAACQAAAAUAAAAOAAAAAcUAAA/FAAAKAEAAGcVAADkAwAAY29sb3Igd...\", \"/p/vSFkZsKmhKSGpmf6E\": \"AgAAACQAAAAKAAAALgAAAK0KAADbCgAA6AAAAMMLAACyAAAAZmFzdCBwd...\", \"/p/zemcitFWMB3y3f9o2\": \"AgAAACQAAAAJAAAALQAAAHEVAACeFQAANAEAANIWAADaAQAAbWlsbGlwZ...\" } } HTTP endpoints \u00b6 Notes \u00b6 The normal way of accessing the Pixelblaze webUI is by using a webbrowser to GET the root endpoint, eg. http://{pixelblazeIpAddress}/ . Adding a queryString of ?min to the above URL will reduce websocket traffic by stopping the webUI from requesting previewFrame images for the pattern list and by stopping the Pixelblaze from sending previewFrame messages for the currently executing pattern. However, because pattern files contain a previewImage it is necessary in this mode to re-enable previewFrame messages (by clicking on the pattern preview row at the top of the webUI) before attempting to edit and save a pattern. Adding a queryString of ?setup to the above URL will show an additional 'Advanced Settings' tab in the webUI which allows setting the brandName which appears in the top left corner of the webUI or enabling simpleUI and learningUI modes. WiFi configuration at initial setup is performed using the following endpoints: GET to the /wifistatus endpoint returns the current WiFi configuration; the response is {\"status\":wifiStatus,\"ip\":\"x.x.x.x\",\"ssid\":\"{ssid}\",\"mac\":\"m:a:c\"} where wifiStatus can be 255 ( modeSetup ), 6 ( modeAccessPoint ), or 3 ( modeClient ). GET to the /wifiscan endpoint starts scanning for access points; the response is: {\"scanning\":1} until the scan completes, at which point it returns a list of the Wifi access points found: [{\"rssi\":-42,\"ssid\":\"AccessPoint1\",\"bssid\":\"xx:xx:xx:xx:xx:xx\",\"channel\":1,\"secure\":false},{\"rssi\":-53,\"ssid\":\"AccessPoint2\",\"bssid\":\"xx:xx:xx:xx:xx:xx\",\"channel\":2,\"secure\":true},{\"rssi\":-71,\"ssid\":\"AccessPoint3\",\"bssid\":\"xx:xx:xx:xx:xx:xx\",\"channel\":6,\"secure\":true}] . POST to the /wifisave endpoint with headers Content-Type: application/x-www-form-urlencoded; charset=UTF-8 and body mode={CLIENT|AP|SETUP}&ssid={SSID}&passphrase={PASSWORD}&discover=true sets the WiFi mode and credentials; the response should be {\"ack\":1} . The Pixelblaze webserver has a REST-ish API which is used for manipulating files stored on the flash filesystem. This is used by the webUI to: GET files from the root endpoint eg. http://{pixelblazeIpAddress}/{fileName} ; POST new or changed files to the /edit endpoint with headers Content-Type: multipart/form-data and formFields filename={fileName} and data={fileData} ; and DELETE files by doing a GET to the /delete?path={fileName} where {filename} includes the folder prefix, eg. /p/ for patterns, /l/ for playlists, etc. Firmware updates delivered as .stfu archives can be uploaded and applied by doing a POST to the /update endpoint with headers Content-Type: multipart/form-data and formFields update={stfuBytes} . A POST to the /reboot endpoint will, unsurprisingly, cause the Pixelblaze to reboot. This can be useful because it is the only way to force Pixelblaze to take notice of changes made to the configuration files through the REST-ish API (configuration files are only read from flash on boot). Network Discovery \u00b6 Around once per second, the Pixelblaze announces its presence with a beacon packet broadcast over UDP on port 1889. This packet is used by the Firestorm utility to detect and synchronize Pixelblazes on the local network; Firestorm replies to each Pixelblaze broadcast with a timeSync packet and the receiving Pixelblaze adjusts its clock according to the time difference calculated from the packet. Beacon packet \u00b6 The beacon packet contains three longwords in little-endian format, representing a 32-bit packetType of 42, the 32-bit IPv4 ipAddress of the Pixelblaze and currentTime according to that Pixelblaze (the lowest 32 bits of the Unix timestamp format, with millisecond resolution). For example, a Pixelblaze at 192.168.4.1 would send the following packet on February 2, 2022 at 02:02:02.02 (timestamp \\x00018321D28F98 ): 0 1 2 3 4 5 6 7 8 9 10 11 [ 42 0 0 0 ] [ 192. 168. 4. 1 ] [ \\x98 \\x8F \\xD2 \\x21 ] TimeSync packet \u00b6 The timeSync packet contains five longwords in little-endian format, representing a 32-bit packetType of 43 ( timesync ), a 32-bit senderId (which seems to allow any value), the authoritative currentTime (the lowest 32 bits of the Unix timestamp format, with millisecond resolution), and a recap of the pixelblazeIpAddress and pixelblazeCurrentTime from the beacon packet to which it is responding. For example, a Firestorm with senderId 65535 running on January 1, 1970 at 00:00:00.00 (timestamp \\x0000000000000000 ) would reply to the Pixelblaze beacon above with: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ 43 0 0 0] [\\xFF \\xFF 0 0] [0 0 0 0] [192. 168. 4. 1] [\\x98 \\x8F \\xD2 \\x21]","title":"The Pixelblaze Protocol"},{"location":"pixelblazeProtocol/#the-pixelblaze-protocol","text":"being an unofficial and apocryphal exegesis of the websocket and HTTP traffic between a Pixelblaze and its webUI","title":"The Pixelblaze protocol"},{"location":"pixelblazeProtocol/#disclaimer","text":"This document was produced for informational purposes only; it is neither sanctioned nor recommended by @wizard. Used incorrectly, some of these commands could cause data loss, brick/shorten the lifespan of a Pixelblaze, or cause excessive power consumption which may damage any connected LEDs or in extreme cases create a fire hazard. However ...the insights described below were gained from observation of the conversation taking place between a correctly-configured Pixelblaze and its user interface webpage, and within that context the risk of repeating commands already known to be valid is minimal. There is no guarantee that this information has been, is, or will remain correct for your particular configuration. Any use is solely at the user's own risk.","title":"Disclaimer"},{"location":"pixelblazeProtocol/#general-observations","text":"","title":"General observations"},{"location":"pixelblazeProtocol/#notes","text":"The Pixelblaze runs both a webserver (listening on :80) and a websocket server (listening on port 81). When a client webbrowser connects to the Pixelblaze webUI on port 80, the webserver returns the file index.html.gz which contains the webUI application. The webbrowser unpacks and executes the webUI application (written in javascript), and most of the subsequent interactions take place over the websocket (the exceptions are structured as REST-ish commands to GET , POST or DELETE information using HTTP). In general, the websocket protocol is client-server with the webUI making a request and, in most cases, the Pixelblaze sending a response. HOWEVER, the Pixelblaze also sends four packets out-of-band which can interrupt the request/response flow: After each render cycle, a preview frame representing the pixels of the currently executing pattern are sent as a binary packet of type 05 ( previewFrame ) whose format is described below; Whenever the current pattern is changed by the sequencer, the Pixelblaze sends the new state of the sequencer: {\"activeProgram\":{\"activeProgramId\":patternId,\"controls\":{}},\"sequencerMode\":sequencerMode,\"runSequencer\":true,\"playlist\":{\"position\":0,\"id\":\"\\_defaultplaylist\\_\",\"ms\":sequencerTime,\"remainingMs\":countdown}} ; Once every second, the Pixelblaze sends a message with diagnostics and statistics: {\"fps\":41.95804,\"vmerr\":0,\"vmerrpc\":-1,\"mem\":2111,\"exp\":0,\"renderType\":2,\"uptime\":48156306,\"storageUsed\":795419,\"storageSize\":2949250} ; and The response to the {\"getConfig\":true} request consists of three separate messages (detailed below) that can come out of sequence. Most websocket messages are JSON strings, but a few messages are sent as binary packets containing a messageType byte, a continuationFlags byte, and dataBlock s of varying lengths. messageTypes are: 01 = putSourceCode (from webUI to Pixeblaze) 03 = putByteCode (from webUI to Pixelblaze) 04 = previewImage (from webUI to Pixelblaze) 05 = previewFrame (from Pixelblaze to webUI) \u2013 this message type does not have continuation flags 06 = getSourceCode (from Pixelblaze to webUI) 07 = getProgramList (from webUI to Pixelblaze) 08 = putPixelMap (from webUI to Pixelblaze) 09 = expanderConfig (from webUI to Pixelblaze AND from Pixelblaze to webUI) continuationFlags are bitwise OR'ed together (a message that fits in a single websocket frame will have _continuationFlags* frameFirst | frameLast , otherwise the message is assembled by concatenating packets until frameLast is seen): 01 = frameFirst 02 = frameMiddle 04 = frameLast Upon loading, the webUI requests the current configuration of the Pixelblaze with: {\"sendUpdates\":false,\"getConfig\":true,\"listPrograms\":true,\"getUpgradeState\":true} . The response to getConfig is three packets containing: the settingsConfig : {\"name\":name,\"brandName\":brandName,\"pixelCount\":pixelCount,\"brightness\":uiBrightness,\"maxBrightness\":maxBrightness,\"colorOrder\":\"GRB\",\"dataSpeed\":3500000,\"ledType\":2,\"sequenceTimer\":15,\"sequencerMode\":0,\"runSequencer\":false,\"simpleUiMode\":false,\"learningUiMode\":false,\"discoveryEnable\":true,\"timezone\":tzString,\"autoOffEnable\":false,\"autoOffStart\":\"00:00\",\"autoOffEnd\":\"00:00\",\"cpuSpeed\":240,\"networkPowerSave\":false,\"mapperFit\":1,\"exp\":0,\"ver\":\"3.24\"} ; the sequencerConfig : {\"activeProgram\":{\"name\":\"Editor\",\"activeProgramId\":null,\"controls\":{}},\"sequencerMode\":0,\"runSequencer\":false} ; and the _ExpanderConfig: (a binary message with messageType expanderConfig (09) , whose contents are described below). The response to listPrograms is detailed under the Patterns tab. The response to getUpgradeState is {\"upgradeState\":{\"code\":upgradeState}} , where upgradeState can be: 0 ( unknown ), 1 ( checking ), 2 ( inProgress ), 3 ( updateError ), 4 ( upToDate ), 5 ( updateAvailable ), or 6 ( updateComplete ). If the upgradeState is 5 ( updateAvailable ), clicking the \"Update\" button sends {\"upgradeVersion\":\"update\"} and then polls with getUpgradeState until the returned upgradeState is 2, 3, or 4. Two sections are present at the top of the screen on all tabs: The \"Brightness\" slider, when changed, sends {\"brightness\":0..100} . UI controls (if any) for the active pattern, when changed, send the new values as: {\"setVar\":{varName:varValue}} .","title":"Notes"},{"location":"pixelblazeProtocol/#patterns-tab","text":"","title":"Patterns tab"},{"location":"pixelblazeProtocol/#notes_1","text":"The Patterns tab (which is the default page when the webUI is loaded) requests the pattern list with: {\"getProgramList\":true} ; the response is one or more binary packets of type 07 ( getProgramList ). For each pattern in the list, the webUI then requests its preview image with {\"getPreviewImg\":patternId} ; the response is a JPG embedded in one or more packets of type 04 ( previewImage ). Clicking on a pattern name sends: {\"setActivePattern\":patternId} . After about 30 seconds, the webUI resends the command with a further parameter to save the pattern selection to flash: {\"setActivePattern\":patternId, \"save\":true} . Sequencer mode can be: \"Off\": (shown above) where the \"Off\" button sends {\"sequencerMode\":0} with no response. \"Shuffle All\": \"Shuffle All\" button sends {\"sequencerMode\":1} which also starts the sequencer. Changing the \"seconds per pattern\" field sends {\"sequenceTimer\":30} \"Pause\" button sends {\"runSequencer\":false} . \"Play\" button sends {\"runSequencer\":true} . \"Next\" button sends {\"nextProgram\":true} which also starts the sequencer. The response to all shuffle commands is the current state of the sequencer (the same message that arrives out-of-band). \"Playlist\": \"Playlist\" button sends {\"sequencerMode\":2} which also starts the sequencer. \"Pause\", \"Play\" and \"Next\" buttons work the same as above. \"Restart\" button sends {\"playlist\":{\"position\":0}} . \"Previous\" button sends {\"playlist\":{\"position\":currentNumber - 1}} where currentNumber came from the most recently announced state of the sequencer. \"Add\" button on pattern sends {\"playlist\":{\"id\":\"\\_defaultplaylist\\_\",\"items\":[{\"id\":patternId,\"ms\":durationInMs=30000}]},\"save\":true} . Adding a pattern, changing the duration, changing the order, or deleting a playlist pattern resends the whole list: {\"playlist\":{\"id\":\"\\_defaultplaylist\\_\",\"items\":[{\"id\":patternId1,\"ms\":durationInMs=30000}, {\"id\":patternId2,\"ms\":durationInMs=30000}, \u2026]},\"save\":true} . The response to all playlist commands is the current state of the sequencer (the same message that arrives out-of-band).","title":"Notes"},{"location":"pixelblazeProtocol/#edit-tab","text":"","title":"Edit tab"},{"location":"pixelblazeProtocol/#notes_2","text":"Any changes within the code pane cause the pattern code to be compiled, and if successful, the bytecode is sent to the Pixelblaze with messageType 03 ( putBytecode ) and it begins executing immediately. The pattern preview window at the top (which appears on all tabs) is updated every time the Pixelblaze sends a new binary packet of type 05 ( previewFrame ), which can arrive at any time. \"Save\" button sends three binary messages of type 04 ( PreviewImage ), 01 ( putSourceCode ), and 03 ( putByteCode ); if successful, the response is {\"ack\":1,\"saveProgramSourceFile\":true} . Brightness slider sends {\"brightness\":0..100} . \"Vars Watch\" button sends {\"getVars\":true|false} .","title":"Notes"},{"location":"pixelblazeProtocol/#mapper-tab","text":"","title":"Mapper tab"},{"location":"pixelblazeProtocol/#notes_3","text":"When the tab is loaded, the webUI fetches the mapFunction from the Pixelblaze with a HTTP GET to the /pixelmap.txt endpoint. Any changes to the mapFunction in the code pane are immediately compiled into mapData and, if successful, cause a binary message of type 08 ( putPixelMap ) to be sent to the Pixelblaze where it is immediately available to the render engine. The \"save\" button sends {\"saveMap\":true} which tells the Pixelblaze to save the most-recently-uploaded mapData to flash as /pixelmap.dat ; it also saves the mapFunction to flash as /pixelmap.txt by doing a a HTTP POST to the /edit endpoint with headers Content-Type: application/x-www-form-urlencoded; charset=UTF-8 and the text of the mapper function as the body.","title":"Notes"},{"location":"pixelblazeProtocol/#settings-tab-v2","text":"","title":"Settings tab (v2)"},{"location":"pixelblazeProtocol/#notes_4","text":"Setting the LED type to \"Output Expander\" reveals another panel: Whenever any field is changed (including the \"Add Board\" and \"Remove\" buttons), the webUI recompiles the table into a binary expanderData blob (details of which are below) and resends it to the Pixelblaze as a binary message of type 08 ( ExpanderSettings ).","title":"Notes"},{"location":"pixelblazeProtocol/#settings-tab-v3","text":"","title":"Settings tab (v3)"},{"location":"pixelblazeProtocol/#notes_5","text":"Essentially the same as v2, with the addition of the \"Cpu Speed\" field (which sends {\"cpuSpeed\":\"80|160|240\"} ) and the \"disableWifi\" field (which sends {\"networkPowerSave\":true|false} ).","title":"Notes"},{"location":"pixelblazeProtocol/#wifi-tab-v3-only","text":"Notes: Page load does a HTTP GET to the /wifistatus endpoint to populate the status field. \"Scan\" button does a HTTP GET to the /wifiscan endpoint to populate the access point list. \"Submit\" button does a HTTP POST to the /wifisave endpoint to save the Wifi configuration. These endpoints are described in further detail below.","title":"Wifi tab (v3 only)"},{"location":"pixelblazeProtocol/#advanced-settings-tab","text":"","title":"Advanced Settings tab"},{"location":"pixelblazeProtocol/#notes_6","text":"The \"Advanced Settings\" tab is only visible when the webUI is loaded with the \"/?setup\" URL. The \"Brand Name\" field sends {\"brandName\":newName} . The \"Simple UI\" checkbox sends {\"simpleUiMode\":true|false} . The \"Learning UI mode\" checkbox sends {\"learningUiMode\":true|false} .","title":"Notes"},{"location":"pixelblazeProtocol/#binary-formats","text":"","title":"Binary formats"},{"location":"pixelblazeProtocol/#previewframe-message","text":"Taking into account the packet framing described above (of which the previewFrame is unique in that it does not have a continuationFlags byte), the body of the previewFrame message consists of groupings of three bytes (corresponding to the Red , Green and Blue values) for each of the pixelCount pixels configured; for example the previewFrame for a 64-pixel setup would contain 1 (header) + 3 (RGB) * 64 (pixels) = 193 bytes. 0 1 2 3 4 5 ... [ red_pixel0, green_pixel0, blue_pixel0 ] [ red_pixel1, green_pixel1, blue_pixel2 ] ...","title":"previewFrame message"},{"location":"pixelblazeProtocol/#mapdata-message","text":"Taking into account the packet framing described above, the body of the mapData message consists of a header containing three 32-bit longwords in little-endian format, representing the formatVersion (1 or 2), the number of dimensions a/k/a numDimensions (1, 2 or 3), and the dataSize in bytes (which is calculated as formatVersion * numDimensions * numElements ). The remainder of the message body contains numElements tuples of numDimensions values, which are either 8-bit ( formatVersion =1) or 16-bit integers in little-endian format ( formatVersion =2), representing the location of each particular pixel on that particular axis (X, Y or Z). Each of these integers then needs to be divided by the respective maxInt for the formatVersion (255 for formatVersion =1, 65535 for formatVersion =2) to obtain a floating-point world coordinate between 0 and 1. For example, a 3-dimensional map with formatVersion =1 and 40 pixels would look like: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ... [ 1 0 0 0 ] [ 3 0 0 0 ] [ 40 0 0 0 ] [ X_0, Y_0, Z_0 ] [ X_1, Y_1, Z_1 ] ... And a 2-dimensional map with formatVersion =2 and 24 pixels would look like: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ... [ 2 0 0 0 ] [ 2 0 0 0 ] [ 24 0 0 0 ] [ lsbX_0 msbX_0, lsbY_0 msbY_0 ] ...","title":"mapData message"},{"location":"pixelblazeProtocol/#expanderconfig-message","text":"Taking into account the packet framing described above, the body of the expanderConfig message consists of a versionNumber byte of 05, followed by one or more 96-byte tables corresponding to each output expander (8 channels * 12 bytes/channel). For example, defining two expanders like this: produces a table like this, which (according to the data structures found in the outputExpander source code ) can be decoded as follows: Where: addx|chan is a packed byte ( addx:5|chan:3 ) combining the expander address and the channel index; ledType is an enumeration with: 0= \u2018notUsed\u2019 , 1= \u2018WS2812B\u2019 , 2= \u2018drawAll\u2019 , 3= \u2018APA102 Data\u2019 , 4= \u2018APA102 Clock\u2019 ; numColors is either 3 (for R/G/B) or 4 (for R/G/B/W); colorOrder is a packed byte ( R:2|G:2|B:2|W:2 ) containing four 2-bit numbers indicating the order in which the colors appear (0=first, 3=last). The possible permutations are: 0x24 = \u2018RGB\u2019 , 0x18 = \u2018RBG\u2019 , 0x09 = \u2018BRG\u2019 , 0x06 = \u2018BGR\u2019 , 0x21 = \u2018GRB\u2019 , 0x12 = \u2018GBR\u2019 , 0xE4 = \u2018RGBW\u2019 , and 0xE1 = \u2018GRBW\u2019 ; pixelCount is the number of pixels on this channel; startIndex is the first address in the range to be directed to this channel; and the four bytes marked as \u2018notUsed\u2019 represent the clockSpeed for the channel, which is not currently supported in either the UI or the outputExpander driver but may be used in a future version.","title":"expanderConfig message"},{"location":"pixelblazeProtocol/#easy-pattern-export-epe-files","text":"EPE files are a portable way of moving patterns between Pixelblazes, even if they have different versions and architectures. EPE files can be exported from the Pixelblaze to the local computer from the \"Patterns\" tab, and imported from the local computer to another Pixelblaze on the \"Edit\" tab (from which it needs to be saved onto the new Pixelblaze). Note: The Pixelblaze pattern language has evolved over time; patterns cannot be successfully imported onto a Pixelblaze whose firmware version does not support the language constructs (eg. array initializers, coordinate translations) they use. The file contents consist of a JSON dictionary containing: the user-assigned name of the pattern; an immutable id for the pattern generated on the Pixelblaze where it was first saved; a JSON dictionary of sources for the pattern, of which there is only one, named main , which contains the javascript-like source code of the pattern; and a base64-encoded JPEG preview image of the pattern, where each vertical row represents the state of the pixels for a single render cycle. When opened in a text editor, an EPE looks something like this: { \"name\": \"Default New Pattern\", \"id\": \"keSLmg6tCWGPMvb85\", \"sources\": { \"main\": \"export function render(index) {\\n hsv(time(.1) + index/pixelCount, 1, 1)\\n}\" }, \"preview\": \"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQo...AAAAB//2Q==\" } EPE files do not contain the current values of the UI controls, which would have been nice. Those can be exported and imported from the Pixelblaze filesystem separately using the REST-ish HTTP API.","title":"Easy Pattern Export (EPE) files"},{"location":"pixelblazeProtocol/#pixelblaze-binary-pattern-pbp-files","text":"Pixelblaze saves patterns to the flash filesystem as a binary blob with the filename /{patternId} . These blobs can be exported and imported from the Pixelblaze filesystem using the REST-ish HTTP API, which is the mechanism used by the Firestorm clone command and the Pixelblaze backup / restore buttons. A PBP blob begins with a header consisting of nine 32-bit longwords representing: The format versionNumber ; the offset to and length of the pattern's Name ; the offset to and length of the pattern's previewImage ; the offset to and length of the pattern's byteCode ; and the offset to and length of the pattern's sourceCode . These components occupy the remainder of the blob.","title":"Pixelblaze Binary Pattern (PBP) files"},{"location":"pixelblazeProtocol/#pixelblaze-binary-backup-pbb-files","text":"Pixelblaze can also, from firmware versions 2.29/3.24 onwards, import and export the entire contents of the flash filesystem -- patterns, playlists and configuration, but not the webUI file itself -- to a local computer as a Pixelblaze Binary Backup. This can be useful for archiving the state of a Pixelblaze, restoring its contents after an experiment gone wrong, or even provisioning multiple Pixelblazes with identical setups (though it would be a good idea afterwards to give them all different names). The file contents consist of a JSON dictionary containing a single element, files , which is another JSON dictionary containing a key/value tuple (where the key is the filename and the value is the file contents, encoded in base64) for each file stored in this Pixelblaze Binary Backup. For example, a Pixelblaze Binary Backup for a Pixelblaze containing 11 patterns might look like this: { \"files\": { \"/apple-touch-icon.png\": \"iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAMAAAAKE/YAAAADAFBMVEUA...\", \"/config.json\": \"eyJuYW1lIjoiUGl4ZWxibGF6ZV84eDhtYXRyaXgiLCJicmFuZE5hbWUiOiIiLCJwa...\", \"/favicon.ico\": \"AAABAAMAMDAAAAEAIACoJQAANgAAACAgAAABACAAqBAAAN4lAAAQEAAAAQAgAGgEA...\", \"/l/_defaultplaylist_\": \"eyJpdGVtcyI6W119\", \"/p/4ANH2jwPKj8nasXeD\": \"AgAAACQAAAASAAAANgAAAK8DAADlAwAARwkAACwNAABuCwAAMUQgQXVyb...\", \"/p/4ANH2jwPKj8nasXeD.c\": \"eyJzbGlkZXJTcGVlZCI6MC44NTg0LCJzbGlkZXJXaWR0aCI6MC43NzU...\", \"/p/4u26f8x7GRsBjQeBn\": \"AgAAACQAAAAMAAAAMAAAAJUTAADFEwAAKAIAAO0VAAA6BAAAZ2xpdGNoI...\", \"/p/5aWMwDm9ALfJniBXi\": \"AgAAACQAAAATAAAANwAAALEMAADoDAAAIAEAAAgOAADQAAAAMUQgbWFyY...\", \"/p/7eeGvKegHGmCD5QAd\": \"AgAAACQAAAAIAAAALAAAAGAJAACMCQAAnQEAACkLAACYBwAAcHVsc2UgM...\", \"/p/7rkpwJrEQBffHPsye\": \"AgAAACQAAAAQAAAANAAAAIAPAAC0DwAALAEAAOAQAAC8AgAAY29sb3IgZ...\", \"/p/8EX6T2cpfA8WxLEEF\": \"AgAAACQAAAAMAAAAMAAAAEoPAAB6DwAADAEAAIYQAADMAQAAcmFpbmJvd...\", \"/p/HuAhJN9zTJKZEinMH\": \"AgAAACQAAAAEAAAAKAAAAK8DAADXAwAAXwAAADYEAABmAQAAIU9mZv/Y/...\", \"/p/gvM2bmyhQFm6bXd93\": \"AgAAACQAAAAVAAAAOQAAABkIAABSCAAAxgYAABgPAAB0BwAAQW5pbWF0Z...\", \"/p/gvM2bmyhQFm6bXd93.c\": \"eyJzbGlkZXJOdW1MaW5lcyI6MC4wNTg0LCJzbGlkZXJMaW5lV2lkdGg...\", \"/p/mvkAmMHcyPsNbPxyt\": \"AgAAACQAAAAUAAAAOAAAAAcUAAA/FAAAKAEAAGcVAADkAwAAY29sb3Igd...\", \"/p/vSFkZsKmhKSGpmf6E\": \"AgAAACQAAAAKAAAALgAAAK0KAADbCgAA6AAAAMMLAACyAAAAZmFzdCBwd...\", \"/p/zemcitFWMB3y3f9o2\": \"AgAAACQAAAAJAAAALQAAAHEVAACeFQAANAEAANIWAADaAQAAbWlsbGlwZ...\" } }","title":"Pixelblaze Binary Backup (PBB) files"},{"location":"pixelblazeProtocol/#http-endpoints","text":"","title":"HTTP endpoints"},{"location":"pixelblazeProtocol/#notes_7","text":"The normal way of accessing the Pixelblaze webUI is by using a webbrowser to GET the root endpoint, eg. http://{pixelblazeIpAddress}/ . Adding a queryString of ?min to the above URL will reduce websocket traffic by stopping the webUI from requesting previewFrame images for the pattern list and by stopping the Pixelblaze from sending previewFrame messages for the currently executing pattern. However, because pattern files contain a previewImage it is necessary in this mode to re-enable previewFrame messages (by clicking on the pattern preview row at the top of the webUI) before attempting to edit and save a pattern. Adding a queryString of ?setup to the above URL will show an additional 'Advanced Settings' tab in the webUI which allows setting the brandName which appears in the top left corner of the webUI or enabling simpleUI and learningUI modes. WiFi configuration at initial setup is performed using the following endpoints: GET to the /wifistatus endpoint returns the current WiFi configuration; the response is {\"status\":wifiStatus,\"ip\":\"x.x.x.x\",\"ssid\":\"{ssid}\",\"mac\":\"m:a:c\"} where wifiStatus can be 255 ( modeSetup ), 6 ( modeAccessPoint ), or 3 ( modeClient ). GET to the /wifiscan endpoint starts scanning for access points; the response is: {\"scanning\":1} until the scan completes, at which point it returns a list of the Wifi access points found: [{\"rssi\":-42,\"ssid\":\"AccessPoint1\",\"bssid\":\"xx:xx:xx:xx:xx:xx\",\"channel\":1,\"secure\":false},{\"rssi\":-53,\"ssid\":\"AccessPoint2\",\"bssid\":\"xx:xx:xx:xx:xx:xx\",\"channel\":2,\"secure\":true},{\"rssi\":-71,\"ssid\":\"AccessPoint3\",\"bssid\":\"xx:xx:xx:xx:xx:xx\",\"channel\":6,\"secure\":true}] . POST to the /wifisave endpoint with headers Content-Type: application/x-www-form-urlencoded; charset=UTF-8 and body mode={CLIENT|AP|SETUP}&ssid={SSID}&passphrase={PASSWORD}&discover=true sets the WiFi mode and credentials; the response should be {\"ack\":1} . The Pixelblaze webserver has a REST-ish API which is used for manipulating files stored on the flash filesystem. This is used by the webUI to: GET files from the root endpoint eg. http://{pixelblazeIpAddress}/{fileName} ; POST new or changed files to the /edit endpoint with headers Content-Type: multipart/form-data and formFields filename={fileName} and data={fileData} ; and DELETE files by doing a GET to the /delete?path={fileName} where {filename} includes the folder prefix, eg. /p/ for patterns, /l/ for playlists, etc. Firmware updates delivered as .stfu archives can be uploaded and applied by doing a POST to the /update endpoint with headers Content-Type: multipart/form-data and formFields update={stfuBytes} . A POST to the /reboot endpoint will, unsurprisingly, cause the Pixelblaze to reboot. This can be useful because it is the only way to force Pixelblaze to take notice of changes made to the configuration files through the REST-ish API (configuration files are only read from flash on boot).","title":"Notes"},{"location":"pixelblazeProtocol/#network-discovery","text":"Around once per second, the Pixelblaze announces its presence with a beacon packet broadcast over UDP on port 1889. This packet is used by the Firestorm utility to detect and synchronize Pixelblazes on the local network; Firestorm replies to each Pixelblaze broadcast with a timeSync packet and the receiving Pixelblaze adjusts its clock according to the time difference calculated from the packet.","title":"Network Discovery"},{"location":"pixelblazeProtocol/#beacon-packet","text":"The beacon packet contains three longwords in little-endian format, representing a 32-bit packetType of 42, the 32-bit IPv4 ipAddress of the Pixelblaze and currentTime according to that Pixelblaze (the lowest 32 bits of the Unix timestamp format, with millisecond resolution). For example, a Pixelblaze at 192.168.4.1 would send the following packet on February 2, 2022 at 02:02:02.02 (timestamp \\x00018321D28F98 ): 0 1 2 3 4 5 6 7 8 9 10 11 [ 42 0 0 0 ] [ 192. 168. 4. 1 ] [ \\x98 \\x8F \\xD2 \\x21 ]","title":"Beacon packet"},{"location":"pixelblazeProtocol/#timesync-packet","text":"The timeSync packet contains five longwords in little-endian format, representing a 32-bit packetType of 43 ( timesync ), a 32-bit senderId (which seems to allow any value), the authoritative currentTime (the lowest 32 bits of the Unix timestamp format, with millisecond resolution), and a recap of the pixelblazeIpAddress and pixelblazeCurrentTime from the beacon packet to which it is responding. For example, a Firestorm with senderId 65535 running on January 1, 1970 at 00:00:00.00 (timestamp \\x0000000000000000 ) would reply to the Pixelblaze beacon above with: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ 43 0 0 0] [\\xFF \\xFF 0 0] [0 0 0 0] [192. 168. 4. 1] [\\x98 \\x8F \\xD2 \\x21]","title":"TimeSync packet"},{"location":"tutorials/","text":"Tutorials \u00b6 TBD \u00b6","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"tutorials/#tbd","text":"","title":"TBD"}]}